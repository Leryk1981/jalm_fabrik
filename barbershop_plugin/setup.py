#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Barbershop Plugin
"""

import os
import sys
import subprocess
import json
import shutil
from pathlib import Path

def print_banner():
    """–í—ã–≤–æ–¥ –±–∞–Ω–Ω–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print("""
ü™í Barbershop Plugin - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
==================================================
    """)

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
    
    requirements = {
        'python': 'python --version',
        'pip': 'pip --version',
        'docker': 'docker --version',
        'docker-compose': 'docker-compose --version',
        'git': 'git --version'
    }
    
    missing = []
    
    for tool, command in requirements.items():
        try:
            result = subprocess.run(command.split(), capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ {tool}: {result.stdout.strip()}")
            else:
                missing.append(tool)
        except FileNotFoundError:
            missing.append(tool)
    
    if missing:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing)}")
        print("üìã –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É")
        return False
    
    return True

def create_env_file():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ .env –∏–∑ —à–∞–±–ª–æ–Ω–∞"""
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")
    
    env_template = """# Barbershop Plugin Configuration

# Telegram Bot
TELEGRAM_BOT_TOKEN=your_bot_token_here
TELEGRAM_WEBHOOK_URL=https://your-domain.com/webhook/telegram

# Firebase
FIREBASE_PROJECT_ID=your-project-id
FIREBASE_CREDENTIALS_PATH=./firebase-credentials.json

# AWS Lambda
AWS_REGION=us-east-1
AWS_ACCESS_KEY_ID=your_access_key
AWS_SECRET_ACCESS_KEY=your_secret_key
LAMBDA_FUNCTION_NAME=barbershop-booking

# API Configuration
API_BASE_URL=https://your-api-gateway-url.amazonaws.com
CORS_ORIGINS=https://your-domain.com,http://localhost:3000

# Database
DATABASE_URL=firestore://your-project-id

# Security
SECRET_KEY=your-secret-key-here
JWT_SECRET=your-jwt-secret-here

# Logging
LOG_LEVEL=INFO
LOG_FILE=./logs/app.log
"""
    
    env_path = Path('.env')
    if not env_path.exists():
        with open(env_path, 'w', encoding='utf-8') as f:
            f.write(env_template)
        print("‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω")
    else:
        print("‚ÑπÔ∏è  –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

def install_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    try:
        subprocess.run([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'], check=True)
        print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
        return False

def setup_directories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    
    directories = [
        'logs',
        'data',
        'uploads',
        'temp',
        'backups'
    ]
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")

def create_scripts():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤"""
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤...")
    
    scripts_dir = Path('scripts')
    scripts_dir.mkdir(exist_ok=True)
    
    # –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
    status_script = """#!/usr/bin/env python3
import requests
import json

def check_service_health():
    services = {
        'Core Runner': 'http://localhost:8000/health',
        'Tula Spec': 'http://localhost:8001/health',
        'Shablon Spec': 'http://localhost:8002/health'
    }
    
    print("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤:")
    for name, url in services.items():
        try:
            response = requests.get(url, timeout=5)
            if response.status_code == 200:
                print(f"‚úÖ {name}: –ó–¥–æ—Ä–æ–≤")
            else:
                print(f"‚ùå {name}: –û—à–∏–±–∫–∞ {response.status_code}")
        except Exception as e:
            print(f"‚ùå {name}: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω - {e}")

if __name__ == "__main__":
    check_service_health()
"""
    
    with open(scripts_dir / 'status.py', 'w', encoding='utf-8') as f:
        f.write(status_script)
    
    # –°–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    restart_script = """#!/usr/bin/env python3
import subprocess
import time

def restart_services():
    print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞
    subprocess.run(['docker-compose', 'down'])
    time.sleep(2)
    
    # –ó–∞–ø—É—Å–∫
    subprocess.run(['docker-compose', 'up', '-d'])
    time.sleep(5)
    
    print("‚úÖ –°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã")

if __name__ == "__main__":
    restart_services()
"""
    
    with open(scripts_dir / 'restart.py', 'w', encoding='utf-8') as f:
        f.write(restart_script)
    
    print("‚úÖ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")

def create_docker_compose():
    """–°–æ–∑–¥–∞–Ω–∏–µ docker-compose.yml"""
    print("üê≥ –°–æ–∑–¥–∞–Ω–∏–µ Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    docker_compose = """version: '3.8'

services:
  core-runner:
    image: jalm/core-runner:latest
    ports:
      - "8000:8000"
    environment:
      - LOG_LEVEL=INFO
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    restart: unless-stopped

  tula-spec:
    image: jalm/tula-spec:latest
    ports:
      - "8001:8001"
    environment:
      - LOG_LEVEL=INFO
    volumes:
      - ./data:/app/data
    restart: unless-stopped

  shablon-spec:
    image: jalm/shablon-spec:latest
    ports:
      - "8002:8002"
    environment:
      - LOG_LEVEL=INFO
    volumes:
      - ./templates:/app/templates
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - core-runner
      - tula-spec
      - shablon-spec
    restart: unless-stopped

volumes:
  data:
  logs:
"""
    
    with open('docker-compose.yml', 'w', encoding='utf-8') as f:
        f.write(docker_compose)
    
    print("‚úÖ Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")

def create_nginx_config():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx"""
    print("üåê –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx...")
    
    nginx_config = """events {
    worker_connections 1024;
}

http {
    upstream core_runner {
        server core-runner:8000;
    }
    
    upstream tula_spec {
        server tula-spec:8001;
    }
    
    upstream shablon_spec {
        server shablon-spec:8002;
    }
    
    server {
        listen 80;
        server_name localhost;
        
        location / {
            proxy_pass http://core_runner;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
        
        location /tula/ {
            proxy_pass http://tula_spec/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
        
        location /shablon/ {
            proxy_pass http://shablon_spec/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
        
        location /static/ {
            alias /app/static/;
        }
    }
}
"""
    
    with open('nginx.conf', 'w', encoding='utf-8') as f:
        f.write(nginx_config)
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Nginx —Å–æ–∑–¥–∞–Ω–∞")

def run_tests():
    """–ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤
        required_files = [
            'manifest.json',
            'llm_actions.json',
            'plugin.js',
            'migrations.csv'
        ]
        
        missing_files = []
        for file in required_files:
            if not Path(file).exists():
                missing_files.append(file)
        
        if missing_files:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
            return False
        
        print("‚úÖ –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def print_next_steps():
    """–í—ã–≤–æ–¥ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤"""
    print("""
üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
==================================================

üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:

1. üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ .env
2. ü§ñ –°–æ–∑–¥–∞–π—Ç–µ Telegram –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather
3. üî• –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Firebase –ø—Ä–æ–µ–∫—Ç
4. ‚òÅÔ∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ AWS Lambda
5. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã: docker-compose up -d
6. üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ: python scripts/status.py

üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: INSTALLATION_GUIDE.md
üîß –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã: scripts/
üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: support@barbershop-plugin.com

–£–¥–∞—á–∏! ü™í
    """)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print_banner()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    if not check_requirements():
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    setup_directories()
    create_env_file()
    create_scripts()
    create_docker_compose()
    create_nginx_config()
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not install_dependencies():
        print("‚ö†Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if not run_tests():
        print("‚ö†Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    print_next_steps()

if __name__ == "__main__":
    main() 