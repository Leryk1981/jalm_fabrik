# Makefile –¥–ª—è Barbershop Plugin

.PHONY: help build test run clean docker-build docker-run docker-stop

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
IMAGE_NAME = barbershop-plugin
TAG = latest
CONTAINER_NAME = barbershop-container

help:
	@echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
	@echo "  build         - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
	@echo "  test          - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"
	@echo "  run           - –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ"
	@echo "  docker-build  - –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞"
	@echo "  docker-run    - –ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
	@echo "  docker-stop   - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
	@echo "  clean         - –û—á–∏—Å—Ç–∫–∞"

build:
	@echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
	pip install -r requirements.txt

test:
	@echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
	python -m pytest tests/ -v

run:
	@echo "üöÄ –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ..."
	python api/main.py

docker-build:
	@echo "üê≥ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
	docker build -t $(IMAGE_NAME):$(TAG) .
	@echo "‚úÖ –û–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω: $(IMAGE_NAME):$(TAG)"

docker-run:
	@echo "üöÄ –ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
	docker run -d \
		--name $(CONTAINER_NAME) \
		-p 8000:8000 \
		-p 8001:8001 \
		-p 8002:8002 \
		-e JALM_ENV=production \
		$(IMAGE_NAME):$(TAG)
	@echo "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω: $(CONTAINER_NAME)"

docker-stop:
	@echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
	docker stop $(CONTAINER_NAME) 2>/dev/null || true
	docker rm $(CONTAINER_NAME) 2>/dev/null || true
	@echo "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

docker-logs:
	@echo "üìã –õ–æ–≥–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
	docker logs -f $(CONTAINER_NAME)

docker-shell:
	@echo "üêö –í—Ö–æ–¥ –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..."
	docker exec -it $(CONTAINER_NAME) /bin/sh

clean:
	@echo "üßπ –û—á–∏—Å—Ç–∫–∞..."
	docker rmi $(IMAGE_NAME):$(TAG) 2>/dev/null || true
	docker system prune -f
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	@echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
dev-install:
	@echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
	pip install -r requirements.txt

dev-test:
	@echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
	python -m pytest tests/ -v --tb=short

dev-run:
	@echo "üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
	uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
prod-build:
	@echo "üè≠ –°–±–æ—Ä–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞..."
	docker build -t $(IMAGE_NAME):prod --target production .
	@echo "‚úÖ –ü—Ä–æ–¥–∞–∫—à–µ–Ω –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω"

prod-run:
	@echo "üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞..."
	docker-compose -f docker-compose.prod.yml up -d
	@echo "‚úÖ –ü—Ä–æ–¥–∞–∫—à–µ–Ω –∑–∞–ø—É—â–µ–Ω"

prod-stop:
	@echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞..."
	docker-compose -f docker-compose.prod.yml down
	@echo "‚úÖ –ü—Ä–æ–¥–∞–∫—à–µ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
