"""
–ú–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Research Layer —Å JALM –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
"""

import json
import shutil
import logging
from pathlib import Path
from typing import Dict, List, Any, Optional
from datetime import datetime

logger = logging.getLogger(__name__)


class JALMIntegration:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Research Layer —Å JALM –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
    """
    
    def __init__(self, base_path: Path = None):
        self.base_path = base_path or Path.cwd()
        self.research_path = self.base_path / "research"
        self.tool_catalog_path = self.base_path / "tool_catalog"
        self.shablon_spec_path = self.base_path / "shablon_spec"
        self.tula_spec_path = self.base_path / "tula_spec"
        
    def integrate_with_tool_catalog(self) -> bool:
        """
        –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Tool Catalog
        –ö–æ–ø–∏—Ä—É–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –≤ tool_catalog/ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        """
        try:
            logger.info("üìö –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Tool Catalog...")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            self.tool_catalog_path.mkdir(exist_ok=True)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
            artifacts_to_copy = [
                ("jalm_templates.json", "templates.json"),
                ("jalm_functions.json", "functions.json"),
                ("pattern_analysis.json", "analysis.json"),
                ("pattern_groups.json", "groups.json")
            ]
            
            for source, target in artifacts_to_copy:
                source_path = self.research_path / "patterns" / source
                target_path = self.tool_catalog_path / target
                
                if source_path.exists():
                    shutil.copy2(source_path, target_path)
                    logger.info(f"   ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω {source} ‚Üí {target}")
                else:
                    logger.warning(f"   ‚ö†Ô∏è –§–∞–π–ª {source} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–∞–π–ª
            self._create_tool_catalog_index()
            
            logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Tool Catalog –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Tool Catalog: {e}")
            return False
    
    def integrate_with_shablon_spec(self) -> bool:
        """
        –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Shablon Spec
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –≤ shablon_spec/registry/
        """
        try:
            logger.info("üìã –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Shablon Spec...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
            templates_file = self.research_path / "patterns" / "jalm_templates.json"
            if not templates_file.exists():
                logger.error("‚ùå –§–∞–π–ª jalm_templates.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã
            with open(templates_file, 'r', encoding='utf-8') as f:
                templates = json.load(f)
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é registry –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            registry_path = self.shablon_spec_path / "registry"
            registry_path.mkdir(parents=True, exist_ok=True)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —à–∞–±–ª–æ–Ω—ã
            existing_templates_file = registry_path / "templates.json"
            existing_templates = []
            
            if existing_templates_file.exists():
                with open(existing_templates_file, 'r', encoding='utf-8') as f:
                    loaded_data = json.load(f)
                    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫
                    if isinstance(loaded_data, list):
                        existing_templates = loaded_data
                    else:
                        logger.warning("   ‚ö†Ô∏è –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —à–∞–±–ª–æ–Ω—ã –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ø–∏—Å–∫–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã
            for template in templates:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ template —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                if isinstance(template, dict):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                    if not any(isinstance(t, dict) and t.get('name') == template.get('name') for t in existing_templates):
                        template['source'] = 'research_layer'
                        template['integrated_at'] = datetime.now().isoformat()
                        existing_templates.append(template)
                        logger.info(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —à–∞–±–ª–æ–Ω: {template.get('name')}")
                    else:
                        logger.info(f"   ‚ö†Ô∏è –®–∞–±–ª–æ–Ω {template.get('name')} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    logger.warning(f"   ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —à–∞–±–ª–æ–Ω: {template}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
            with open(existing_templates_file, 'w', encoding='utf-8') as f:
                json.dump(existing_templates, f, indent=2, ensure_ascii=False)
            
            logger.info(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Shablon Spec –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(existing_templates)}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Shablon Spec: {e}")
            return False
    
    def integrate_with_tula_registry(self) -> bool:
        """
        –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Tula Registry
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ tula_spec/registry/
        """
        try:
            logger.info("üîß –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Tula Registry...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
            functions_file = self.research_path / "patterns" / "jalm_functions.json"
            if not functions_file.exists():
                logger.error("‚ùå –§–∞–π–ª jalm_functions.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
            with open(functions_file, 'r', encoding='utf-8') as f:
                functions = json.load(f)
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é registry –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            registry_path = self.tula_spec_path / "registry"
            registry_path.mkdir(parents=True, exist_ok=True)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            existing_functions_file = registry_path / "functions.json"
            existing_functions = []
            
            if existing_functions_file.exists():
                with open(existing_functions_file, 'r', encoding='utf-8') as f:
                    loaded_data = json.load(f)
                    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫
                    if isinstance(loaded_data, list):
                        existing_functions = loaded_data
                    else:
                        logger.warning("   ‚ö†Ô∏è –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ø–∏—Å–∫–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            for function in functions:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ function —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                if isinstance(function, dict):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                    if not any(isinstance(f, dict) and f.get('name') == function.get('name') for f in existing_functions):
                        function['source'] = 'research_layer'
                        function['integrated_at'] = datetime.now().isoformat()
                        existing_functions.append(function)
                        logger.info(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è: {function.get('name')}")
                    else:
                        logger.info(f"   ‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è {function.get('name')} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    logger.warning(f"   ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {function}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            with open(existing_functions_file, 'w', encoding='utf-8') as f:
                json.dump(existing_functions, f, indent=2, ensure_ascii=False)
            
            logger.info(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Tula Registry –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(existing_functions)}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Tula Registry: {e}")
            return False
    
    def _create_tool_catalog_index(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è Tool Catalog"""
        try:
            index_data = {
                "catalog_info": {
                    "name": "JALM Tool Catalog",
                    "version": "1.0.0",
                    "description": "–ö–∞—Ç–∞–ª–æ–≥ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ —à–∞–±–ª–æ–Ω–æ–≤ JALM",
                    "last_updated": datetime.now().isoformat(),
                    "source": "research_layer"
                },
                "files": {
                    "templates": "templates.json",
                    "functions": "functions.json", 
                    "analysis": "analysis.json",
                    "groups": "groups.json"
                },
                "statistics": {
                    "total_templates": 0,
                    "total_functions": 0,
                    "total_groups": 0
                }
            }
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            for file_name, file_path in index_data["files"].items():
                full_path = self.tool_catalog_path / file_path
                if full_path.exists():
                    with open(full_path, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                        if isinstance(data, list):
                            index_data["statistics"][f"total_{file_name}"] = len(data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å
            index_file = self.tool_catalog_path / "index.json"
            with open(index_file, 'w', encoding='utf-8') as f:
                json.dump(index_data, f, indent=2, ensure_ascii=False)
            
            logger.info("   ‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–∞–π–ª tool_catalog/index.json")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞: {e}")
    
    def run_full_integration(self) -> Dict[str, bool]:
        """
        –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ –≤—Å–µ–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
        """
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Research Layer —Å JALM...")
        
        results = {
            'tool_catalog': self.integrate_with_tool_catalog(),
            'shablon_spec': self.integrate_with_shablon_spec(),
            'tula_registry': self.integrate_with_tula_registry()
        }
        
        success_count = sum(results.values())
        total_count = len(results)
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {success_count}/{total_count} —É—Å–ø–µ—à–Ω–æ")
        
        for component, success in results.items():
            status = "‚úÖ" if success else "‚ùå"
            logger.info(f"   {component}: {status}")
        
        return results
    
    def validate_integration(self) -> Dict[str, bool]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        """
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
        
        validation_results = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Tool Catalog
        tool_catalog_files = [
            "templates.json",
            "functions.json", 
            "analysis.json",
            "groups.json",
            "index.json"
        ]
        
        tool_catalog_valid = all(
            (self.tool_catalog_path / file).exists() 
            for file in tool_catalog_files
        )
        validation_results['tool_catalog'] = tool_catalog_valid
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Shablon Spec
        shablon_spec_valid = (
            self.shablon_spec_path / "registry" / "templates.json"
        ).exists()
        validation_results['shablon_spec'] = shablon_spec_valid
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Tula Registry
        tula_registry_valid = (
            self.tula_spec_path / "registry" / "functions.json"
        ).exists()
        validation_results['tula_registry'] = tula_registry_valid
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for component, valid in validation_results.items():
            status = "‚úÖ" if valid else "‚ùå"
            logger.info(f"   {component}: {status}")
        
        return validation_results 