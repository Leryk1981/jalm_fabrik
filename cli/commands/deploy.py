"""
–ö–æ–º–∞–Ω–¥–∞ deploy - –¥–µ–ø–ª–æ–π —à–∞–±–ª–æ–Ω–æ–≤
"""

import subprocess
import os
import json
import logging
from pathlib import Path

def run(template: str, name: str, config_path: str, config, logger: logging.Logger):
    """–î–µ–ø–ª–æ–∏—Ç —à–∞–±–ª–æ–Ω"""
    
    logger.info(f"üöÄ –î–µ–ø–ª–æ–π —à–∞–±–ª–æ–Ω–∞: {template}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –¥–µ–ø–ª–æ—è
    deploy_name = name or f"{template}-{int(time.time())}"
    
    logger.info(f"–ò–º—è –¥–µ–ø–ª–æ—è: {deploy_name}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —à–∞–±–ª–æ–Ω–∞
        template_info = _check_template_availability(template, config, logger)
        if not template_info:
            return False
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–µ–ø–ª–æ—è
        deploy_dir = _create_deploy_directory(deploy_name, logger)
        if not deploy_dir:
            return False
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–µ–ø–ª–æ—è
        deploy_config = _generate_deploy_config(template, deploy_name, config_path, config, logger)
        if not deploy_config:
            return False
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–ø–ª–æ–π
        success = _execute_deploy(deploy_name, deploy_config, config, logger)
        
        if success:
            logger.info(f"‚úÖ –î–µ–ø–ª–æ–π {deploy_name} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            _print_deploy_info(deploy_name, deploy_config, logger)
        else:
            logger.error(f"‚ùå –î–µ–ø–ª–æ–π {deploy_name} –Ω–µ —É–¥–∞–ª—Å—è")
        
        return success
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è: {e}")
        return False

def _check_template_availability(template: str, config, logger: logging.Logger) -> dict:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —à–∞–±–ª–æ–Ω–∞"""
    
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —à–∞–±–ª–æ–Ω–∞: {template}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ shablon-spec
    shablon_config = config.get_service_config('shablon-spec')
    shablon_port = shablon_config.get('port', 8002)
    
    try:
        import requests
        url = f"http://localhost:{shablon_port}/templates/{template}"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            template_data = response.json()
            logger.info(f"‚úÖ –®–∞–±–ª–æ–Ω {template} –Ω–∞–π–¥–µ–Ω –≤ shablon-spec")
            return template_data
        else:
            logger.warning(f"–®–∞–±–ª–æ–Ω {template} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ shablon-spec")
            
    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ shablon-spec: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
    local_templates = _find_local_templates(config, logger)
    if template in local_templates:
        logger.info(f"‚úÖ –®–∞–±–ª–æ–Ω {template} –Ω–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ")
        return local_templates[template]
    
    logger.error(f"‚ùå –®–∞–±–ª–æ–Ω {template} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    logger.info("–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:")
    for t in local_templates.keys():
        logger.info(f"  - {t}")
    
    return None

def _find_local_templates(config, logger: logging.Logger) -> dict:
    """–ò—â–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã"""
    
    templates = {}
    
    # –ò—â–µ–º –≤ shablon_spec
    shablon_config = config.get_service_config('shablon-spec')
    shablon_path = shablon_config.get('path', './shablon_spec')
    
    templates_dir = os.path.join(shablon_path, 'templates')
    if os.path.exists(templates_dir):
        for item in os.listdir(templates_dir):
            item_path = os.path.join(templates_dir, item)
            if os.path.isdir(item_path):
                # –ò—â–µ–º metadata.json
                metadata_file = os.path.join(item_path, 'metadata.json')
                if os.path.exists(metadata_file):
                    try:
                        with open(metadata_file, 'r', encoding='utf-8') as f:
                            metadata = json.load(f)
                            templates[item] = metadata
                    except Exception as e:
                        logger.debug(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {metadata_file}: {e}")
    
    return templates

def _create_deploy_directory(deploy_name: str, logger: logging.Logger) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–µ–ø–ª–æ—è"""
    
    deploy_dir = f"./deployments/{deploy_name}"
    
    try:
        os.makedirs(deploy_dir, exist_ok=True)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–µ–ø–ª–æ—è: {deploy_dir}")
        return deploy_dir
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–µ–ø–ª–æ—è: {e}")
        return None

def _generate_deploy_config(template: str, deploy_name: str, config_path: str, config, logger: logging.Logger) -> dict:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–µ–ø–ª–æ—è"""
    
    logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–µ–ø–ª–æ—è...")
    
    # –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    deploy_config = {
        'name': deploy_name,
        'template': template,
        'created_at': int(time.time()),
        'services': {},
        'ports': {},
        'environment': {}
    }
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if config_path and os.path.exists(config_path):
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                user_config = json.load(f)
                deploy_config.update(user_config)
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config_path}")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_path}: {e}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Ä—Ç—ã –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
    base_port = 9000
    for service in ['core-runner', 'tula-spec', 'shablon-spec']:
        deploy_config['ports'][service] = base_port
        base_port += 1
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_file = f"./deployments/{deploy_name}/deploy.json"
    try:
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(deploy_config, f, indent=2, ensure_ascii=False)
        logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {config_file}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return None
    
    return deploy_config

def _execute_deploy(deploy_name: str, deploy_config: dict, config, logger: logging.Logger) -> bool:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–ø–ª–æ–π"""
    
    logger.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–ø–ª–æ—è...")
    
    deploy_dir = f"./deployments/{deploy_name}"
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º SaaS Provisioner –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
        provisioner_path = './saas_provisioner.py'
        if os.path.exists(provisioner_path):
            logger.info("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ SaaS Provisioner...")
            
            cmd = [
                'python', provisioner_path,
                '--template', deploy_config['template'],
                '--name', deploy_name,
                '--config', f"{deploy_dir}/deploy.json"
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=300  # 5 –º–∏–Ω—É—Ç –Ω–∞ –¥–µ–ø–ª–æ–π
            )
            
            if result.returncode == 0:
                logger.info("SaaS Provisioner –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ SaaS Provisioner: {result.stderr}")
                return False
        else:
            logger.warning("SaaS Provisioner –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –¥–µ–ø–ª–æ–π")
            return _basic_deploy(deploy_name, deploy_config, config, logger)
            
    except subprocess.TimeoutExpired:
        logger.error("–¢–∞–π–º–∞—É—Ç –¥–µ–ø–ª–æ—è")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–ø–ª–æ—è: {e}")
        return False

def _basic_deploy(deploy_name: str, deploy_config: dict, config, logger: logging.Logger) -> bool:
    """–ë–∞–∑–æ–≤—ã–π –¥–µ–ø–ª–æ–π –±–µ–∑ SaaS Provisioner"""
    
    logger.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –¥–µ–ø–ª–æ—è...")
    
    # –°–æ–∑–¥–∞–µ–º docker-compose.yml –¥–ª—è –¥–µ–ø–ª–æ—è
    compose_content = _generate_docker_compose(deploy_config, config, logger)
    
    compose_file = f"./deployments/{deploy_name}/docker-compose.yml"
    try:
        with open(compose_file, 'w', encoding='utf-8') as f:
            f.write(compose_content)
        logger.info(f"–°–æ–∑–¥–∞–Ω docker-compose.yml: {compose_file}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è docker-compose.yml: {e}")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ docker-compose
    try:
        cmd = ['docker-compose', '-f', compose_file, 'up', '-d']
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=120)
        
        if result.returncode == 0:
            logger.info("Docker Compose –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ Docker Compose: {result.stderr}")
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Docker Compose: {e}")
        return False

def _generate_docker_compose(deploy_config: dict, config, logger: logging.Logger) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç docker-compose.yml –¥–ª—è –¥–µ–ø–ª–æ—è"""
    
    services = {}
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å—ã
    for service_name in ['core-runner', 'tula-spec', 'shablon-spec']:
        service_config = config.get_service_config(service_name)
        port = deploy_config['ports'].get(service_name, service_config.get('port', 8000))
        
        services[service_name] = {
            'build': service_config.get('path', f'./{service_name}'),
            'ports': [f"{port}:{service_config.get('port', 8000)}"],
            'environment': deploy_config.get('environment', {}),
            'networks': ['jalm-network']
        }
    
    compose = {
        'version': '3.8',
        'services': services,
        'networks': {
            'jalm-network': {
                'driver': 'bridge'
            }
        }
    }
    
    import yaml
    return yaml.dump(compose, default_flow_style=False, allow_unicode=True)

def _print_deploy_info(deploy_name: str, deploy_config: dict, logger: logging.Logger):
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–ø–ª–æ–µ"""
    
    logger.info("\n" + "="*50)
    logger.info("–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–ï–ü–õ–û–ï")
    logger.info("="*50)
    logger.info(f"–ò–º—è: {deploy_name}")
    logger.info(f"–®–∞–±–ª–æ–Ω: {deploy_config['template']}")
    logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ./deployments/{deploy_name}")
    
    logger.info("\n–ü–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤:")
    for service, port in deploy_config['ports'].items():
        logger.info(f"  {service}: http://localhost:{port}")
    
    logger.info(f"\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:")
    logger.info(f"  –û—Å—Ç–∞–Ω–æ–≤–∫–∞: docker-compose -f ./deployments/{deploy_name}/docker-compose.yml down")
    logger.info(f"  –õ–æ–≥–∏: docker-compose -f ./deployments/{deploy_name}/docker-compose.yml logs")

# –ò–º–ø–æ—Ä—Ç time –¥–ª—è timestamp
import time 