"""
–ö–æ–º–∞–Ω–¥–∞ research –¥–ª—è CLI - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Research Layer
"""

import argparse
import logging
import sys
from pathlib import Path
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ research –º–æ–¥—É–ª—é
sys.path.append(str(Path(__file__).parent.parent.parent))

try:
    from research import DataCollector, PatternAnalyzer, ResearchConfig
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Research Layer: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥—É–ª—å research —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    sys.exit(1)

logger = logging.getLogger(__name__)


def research_collect(args: argparse.Namespace) -> int:
    """
    –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Research Layer
    """
    try:
        logger.info("üîç –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Research Layer...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = ResearchConfig()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–±–æ—Ä—â–∏–∫–∞
        collector = DataCollector(config)
        
        # –°–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π
        logger.info("üìä –°–æ–±–∏—Ä–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è...")
        actions = collector.collect_actions()
        logger.info(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {len(actions)} –¥–µ–π—Å—Ç–≤–∏–π")
        
        # –≠–∫—Å–ø–æ—Ä—Ç –¥–µ–π—Å—Ç–≤–∏–π
        actions_file = collector.export(actions, args.format, "raw_actions.csv")
        logger.info(f"üìÅ –î–µ–π—Å—Ç–≤–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {actions_file}")
        
        # –°–±–æ—Ä –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        logger.info("üéØ –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã...")
        patterns = collector.collect_patterns()
        logger.info(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {len(patterns)} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
        
        # –≠–∫—Å–ø–æ—Ä—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        patterns_file = collector.export(patterns, args.format, "raw_patterns.csv")
        logger.info(f"üìÅ –ü–∞—Ç—Ç–µ—Ä–Ω—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {patterns_file}")
        
        logger.info("üéâ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return 0
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return 1


def research_analyze(args: argparse.Namespace) -> int:
    """
    –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —á–µ—Ä–µ–∑ Research Layer
    """
    try:
        logger.info("üîç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = ResearchConfig()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
        patterns_file = config.get_data_path("raw_patterns.csv")
        if not patterns_file.exists():
            logger.error("‚ùå –§–∞–π–ª —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ 'jalm research collect'")
            return 1
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        analyzer = PatternAnalyzer(config)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        logger.info("üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
        if args.input_file:
            input_path = Path(args.input_file)
        else:
            input_path = patterns_file
            
        if not input_path.exists():
            logger.error(f"‚ùå –§–∞–π–ª {input_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return 1
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
        if input_path.suffix == '.json':
            import json
            with open(input_path, 'r', encoding='utf-8') as f:
                patterns = json.load(f)
        elif input_path.suffix == '.csv':
            import pandas as pd
            df = pd.read_csv(input_path)
            patterns = df.to_dict('records')
        else:
            logger.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {input_path.suffix}")
            return 1
        
        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(patterns)} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        logger.info("üî¨ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã...")
        analysis = analyzer.analyze_patterns(patterns)
        logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        logger.info("üìÇ –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã...")
        groups = analyzer.group_patterns(patterns)
        logger.info(f"‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ {len(groups)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –¥–ª—è JALM
        logger.info("üéØ –°–æ–∑–¥–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –¥–ª—è JALM...")
        artifacts = analyzer.create_jalm_artifacts(patterns)
        
        for artifact_type, filepath in artifacts.items():
            logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω –∞—Ä—Ç–µ—Ñ–∞–∫—Ç {artifact_type}: {filepath}")
        
        logger.info("üéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return 0
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return 1


def research_integrate(args: argparse.Namespace) -> int:
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å JALM –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
    """
    try:
        logger.info("üîó –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å JALM –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = ResearchConfig()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        artifacts_dir = config.patterns_dir
        required_files = [
            "jalm_templates.json",
            "jalm_functions.json", 
            "pattern_analysis.json",
            "pattern_groups.json"
        ]
        
        missing_files = []
        for file in required_files:
            if not (artifacts_dir / file).exists():
                missing_files.append(file)
        
        if missing_files:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã: {', '.join(missing_files)}")
            logger.info("üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ 'jalm research analyze'")
            return 1
        
        logger.info("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Tool Catalog
        logger.info("üìö –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —Å Tool Catalog...")
        _integrate_with_tool_catalog(config)
        
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Shablon Spec
        logger.info("üìã –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —Å Shablon Spec...")
        _integrate_with_shablon_spec(config)
        
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Tula Registry
        logger.info("üîß –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —Å Tula Registry...")
        _integrate_with_tula_registry(config)
        
        logger.info("üéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å JALM –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return 0
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return 1


def research_status(args: argparse.Namespace) -> int:
    """
    –°—Ç–∞—Ç—É—Å Research Layer
    """
    try:
        logger.info("üìä –°—Ç–∞—Ç—É—Å Research Layer:")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = ResearchConfig()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        patterns_dir = config.patterns_dir
        logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {patterns_dir}")
        logger.info(f"   –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {'‚úÖ' if patterns_dir.exists() else '‚ùå'}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        logger.info("üìÑ –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö:")
        data_files = [
            "raw_actions.csv",
            "raw_patterns.csv", 
            "pattern_analysis.json",
            "pattern_groups.json",
            "jalm_templates.json",
            "jalm_functions.json"
        ]
        
        for file in data_files:
            file_path = patterns_dir / file
            status = "‚úÖ" if file_path.exists() else "‚ùå"
            size = f"({file_path.stat().st_size} bytes)" if file_path.exists() else ""
            logger.info(f"   {file}: {status} {size}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        logger.info("üîß –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
        try:
            import requests, yaml, pandas
            logger.info("   ‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except ImportError as e:
            logger.info(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if (patterns_dir / "raw_patterns.csv").exists():
            import pandas as pd
            df = pd.read_csv(patterns_dir / "raw_patterns.csv")
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(df)} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
        
        logger.info("‚úÖ –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–µ–Ω")
        return 0
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return 1


def _integrate_with_tool_catalog(config: ResearchConfig) -> None:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Tool Catalog"""
    try:
        from research.integration import JALMIntegration
        integration = JALMIntegration()
        success = integration.integrate_with_tool_catalog()
        if success:
            logger.info("   üìö Tool Catalog –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        else:
            logger.error("   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Tool Catalog")
    except Exception as e:
        logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Tool Catalog: {e}")


def _integrate_with_shablon_spec(config: ResearchConfig) -> None:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Shablon Spec"""
    try:
        from research.integration import JALMIntegration
        integration = JALMIntegration()
        success = integration.integrate_with_shablon_spec()
        if success:
            logger.info("   üìã Shablon Spec –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        else:
            logger.error("   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Shablon Spec")
    except Exception as e:
        logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Shablon Spec: {e}")


def _integrate_with_tula_registry(config: ResearchConfig) -> None:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Tula Registry"""
    try:
        from research.integration import JALMIntegration
        integration = JALMIntegration()
        success = integration.integrate_with_tula_registry()
        if success:
            logger.info("   üîß Tula Registry –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        else:
            logger.error("   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Tula Registry")
    except Exception as e:
        logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Tula Registry: {e}")


def research_docker_build(args: argparse.Namespace) -> int:
    """–°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑ –¥–ª—è Research Layer"""
    try:
        import subprocess
        
        logger.info("üê≥ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞...")
        result = subprocess.run(
            ["docker", "build", "-t", "jalm-research", "."],
            cwd="research",
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            logger.info("‚úÖ Docker –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return 0
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: {result.stderr}")
            return 1
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 1


def research_docker_up(args: argparse.Namespace) -> int:
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å Research Layer –≤ Docker"""
    try:
        import subprocess
        
        logger.info("üê≥ –ó–∞–ø—É—Å–∫ Research Layer –≤ Docker...")
        result = subprocess.run(
            ["docker-compose", "up", "-d"],
            cwd="research",
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            logger.info("‚úÖ Research Layer –∑–∞–ø—É—â–µ–Ω –≤ Docker")
            return 0
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {result.stderr}")
            return 1
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 1


def research_docker_down(args: argparse.Namespace) -> int:
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Research Layer –≤ Docker"""
    try:
        import subprocess
        
        logger.info("üê≥ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Research Layer...")
        result = subprocess.run(
            ["docker-compose", "down"],
            cwd="research",
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            logger.info("‚úÖ Research Layer –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return 0
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {result.stderr}")
            return 1
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 1


def research_docker_logs(args: argparse.Namespace) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ Research Layer"""
    try:
        import subprocess
        
        logger.info("üê≥ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤...")
        subprocess.run(
            ["docker-compose", "logs", "-f"],
            cwd="research"
        )
        return 0
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 1


def add_research_parser(subparsers: argparse._SubParsersAction) -> None:
    """
    –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã research
    """
    research_parser = subparsers.add_parser(
        'research',
        help='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Research Layer'
    )
    
    research_subparsers = research_parser.add_subparsers(
        dest='research_command',
        help='–ö–æ–º–∞–Ω–¥—ã Research Layer'
    )
    
    # –ö–æ–º–∞–Ω–¥–∞ collect
    collect_parser = research_subparsers.add_parser(
        'collect',
        help='–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Research Layer'
    )
    collect_parser.add_argument(
        '--format',
        choices=['csv', 'json', 'yaml'],
        default='csv',
        help='–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤'
    )
    collect_parser.set_defaults(func=research_collect)
    
    # –ö–æ–º–∞–Ω–¥–∞ analyze
    analyze_parser = research_subparsers.add_parser(
        'analyze',
        help='–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —á–µ—Ä–µ–∑ Research Layer'
    )
    analyze_parser.add_argument(
        '--input-file',
        type=str,
        help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'
    )
    analyze_parser.add_argument(
        '--format',
        choices=['csv', 'json', 'yaml'],
        default='json',
        help='–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤'
    )
    analyze_parser.set_defaults(func=research_analyze)
    
    # –ö–æ–º–∞–Ω–¥–∞ integrate
    integrate_parser = research_subparsers.add_parser(
        'integrate',
        help='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å JALM –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏'
    )
    integrate_parser.set_defaults(func=research_integrate)
    
    # –ö–æ–º–∞–Ω–¥–∞ status
    status_parser = research_subparsers.add_parser(
        'status',
        help='–°—Ç–∞—Ç—É—Å Research Layer'
    )
    status_parser.set_defaults(func=research_status)
    
    # –ö–æ–º–∞–Ω–¥–∞ docker-build
    docker_build_parser = research_subparsers.add_parser(
        'docker-build',
        help='–°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑ –¥–ª—è Research Layer'
    )
    docker_build_parser.set_defaults(func=research_docker_build)
    
    # –ö–æ–º–∞–Ω–¥–∞ docker-up
    docker_up_parser = research_subparsers.add_parser(
        'docker-up',
        help='–ó–∞–ø—É—Å—Ç–∏—Ç—å Research Layer –≤ Docker'
    )
    docker_up_parser.set_defaults(func=research_docker_up)
    
    # –ö–æ–º–∞–Ω–¥–∞ docker-down
    docker_down_parser = research_subparsers.add_parser(
        'docker-down',
        help='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Research Layer –≤ Docker'
    )
    docker_down_parser.set_defaults(func=research_docker_down)
    
    # –ö–æ–º–∞–Ω–¥–∞ docker-logs
    docker_logs_parser = research_subparsers.add_parser(
        'docker-logs',
        help='–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ Research Layer'
    )
    docker_logs_parser.set_defaults(func=research_docker_logs) 

# Click –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å CLI
import click

@click.group()
def research():
    """Research Layer - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º–∏"""
    pass

@research.command()
@click.option('--format', default='csv', type=click.Choice(['csv', 'json', 'yaml']), help='–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤')
def collect(format):
    """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Research Layer"""
    import argparse
    args = argparse.Namespace()
    args.format = format
    return research_collect(args)

@research.command()
@click.option('--input-file', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
@click.option('--format', default='json', type=click.Choice(['csv', 'json', 'yaml']), help='–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤')
def analyze(input_file, format):
    """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —á–µ—Ä–µ–∑ Research Layer"""
    import argparse
    args = argparse.Namespace()
    args.input_file = input_file
    args.format = format
    return research_analyze(args)

@research.command()
def integrate():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å JALM –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
    import argparse
    args = argparse.Namespace()
    return research_integrate(args)

@research.command()
def status():
    """–°—Ç–∞—Ç—É—Å Research Layer"""
    import argparse
    args = argparse.Namespace()
    return research_status(args)

@research.command()
def docker_build():
    """–°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑ –¥–ª—è Research Layer"""
    import argparse
    args = argparse.Namespace()
    return research_docker_build(args)

@research.command()
def docker_up():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å Research Layer –≤ Docker"""
    import argparse
    args = argparse.Namespace()
    return research_docker_up(args)

@research.command()
def docker_down():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Research Layer –≤ Docker"""
    import argparse
    args = argparse.Namespace()
    return research_docker_down(args)

@research.command()
def docker_logs():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ Research Layer"""
    import argparse
    args = argparse.Namespace()
    return research_docker_logs(args) 