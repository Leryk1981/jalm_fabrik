"""
Context7 Helper –∫–æ–º–∞–Ω–¥—ã –¥–ª—è CLI JALM Full Stack

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Context7 Helper —Å –æ—Å–Ω–æ–≤–Ω—ã–º CLI –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∫–æ–¥–∞
–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ tool_candidates.
"""

import click
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ context7_helper
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "context7_helper"))

try:
    from context7_helper.integration import IntegrationManager
    from context7_helper.searcher import SearchQuery
    CONTEXT7_AVAILABLE = True
except ImportError:
    CONTEXT7_AVAILABLE = False

logger = logging.getLogger(__name__)

@click.group()
def context7():
    """Context7 Helper - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∫–æ–¥–∞"""
    if not CONTEXT7_AVAILABLE:
        click.echo("‚ùå Context7 Helper –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–æ–¥—É–ª—å context7_helper.")
        sys.exit(1)

@context7.command()
@click.option('--query', required=True, help='–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å')
@click.option('--language', default='python', help='–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è')
@click.option('--top-k', default=5, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
@click.option('--output', help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
@click.option('--api-key', help='API –∫–ª—é—á –¥–ª—è Context7')
def search(query, language, top_k, output, api_key):
    """–ü–æ–∏—Å–∫ –∫–æ–¥–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    try:
        manager = IntegrationManager(api_key=api_key)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        search_query = SearchQuery(
            action_name=query,
            description=query,
            language=language
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        results = manager.searcher.search(search_query, top_k)
        
        if not results:
            click.echo("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        click.echo(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n")
        
        for i, result in enumerate(results, 1):
            click.echo(f"{i}. {result.function_name}")
            click.echo(f"   üì¶ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {result.repo}")
            click.echo(f"   üìÅ –§–∞–π–ª: {result.source_file}")
            click.echo(f"   ‚≠ê –°–∫–æ—Ä: {result.score:.3f}")
            click.echo(f"   üåü –ó–≤–µ–∑–¥—ã: {result.stars}")
            click.echo(f"   üìÑ –õ–∏—Ü–µ–Ω–∑–∏—è: {result.license}")
            click.echo(f"   üíª –ü—Ä–∏–º–µ—Ä: {result.example[:100]}...")
            click.echo()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if output:
            import json
            output_data = []
            for result in results:
                output_data.append({
                    "function_name": result.function_name,
                    "repo": result.repo,
                    "file_path": result.source_file,
                    "score": result.score,
                    "stars": result.stars,
                    "license": result.license,
                    "example": result.example
                })
            
            with open(output, 'w', encoding='utf-8') as f:
                json.dump(output_data, f, indent=2, ensure_ascii=False)
            
            click.echo(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output}")
        
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")

@context7.command()
@click.option('--research-dir', default='research', help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π')
@click.option('--top-k', default=3, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å')
@click.option('--output-dir', default='tool_candidates', help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è')
@click.option('--api-key', help='API –∫–ª—é—á –¥–ª—è Context7')
def generate(research_dir, top_k, output_dir, api_key):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏–∑ Research Layer"""
    try:
        manager = IntegrationManager(api_key=api_key, output_dir=output_dir)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω
        result = manager.run_full_pipeline(research_dir, top_k)
        
        if not result["success"]:
            click.echo(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
        click.echo(f"\n‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        click.echo(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–π: {result['processed_actions']}")
        click.echo(f"üîç –ü–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {result['search_queries']}")
        click.echo(f"üéØ –°–æ–∑–¥–∞–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {result['generated_candidates']}")
        
        if result['categories']:
            click.echo(f"\nüìÇ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
            for category, count in result['categories'].items():
                click.echo(f"   {category}: {count}")
        
        click.echo(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:")
        for file_type, paths in result['saved_files'].items():
            if isinstance(paths, list):
                click.echo(f"   {file_type}: {len(paths)} —Ñ–∞–π–ª–æ–≤")
            else:
                click.echo(f"   {file_type}: {paths}")
        
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")

@context7.command()
@click.option('--api-key', help='API –∫–ª—é—á –¥–ª—è Context7')
def status(api_key):
    """–°—Ç–∞—Ç—É—Å Context7 Helper"""
    try:
        manager = IntegrationManager(api_key=api_key)
        status = manager.get_status()
        
        click.echo(f"\nüìä –°—Ç–∞—Ç—É—Å Context7 Helper:")
        click.echo(f"üîå Context7 API: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if status['context7_api'] else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        click.echo(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–∞: {status['output_directory']}")
        click.echo(f"üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {'‚úÖ –î–∞' if status['output_directory_exists'] else '‚ùå –ù–µ—Ç'}")
        click.echo(f"üéØ –í—Å–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {status['candidates_count']}")
        
        if status['categories']:
            click.echo(f"\nüìÇ –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
            for category, count in status['categories'].items():
                click.echo(f"   {category}: {count}")
        
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")

@context7.command()
@click.option('--days', default=7, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è')
@click.option('--api-key', help='API –∫–ª—é—á –¥–ª—è Context7')
def cleanup(days, api_key):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
    try:
        manager = IntegrationManager(api_key=api_key)
        deleted_count = manager.cleanup_old_candidates(days)
        
        click.echo(f"\nüßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        click.echo(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {deleted_count}")
        
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

@context7.command()
@click.option('--api-key', help='API –∫–ª—é—á –¥–ª—è Context7')
def test(api_key):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Context7 Helper"""
    try:
        manager = IntegrationManager(api_key=api_key)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        status = manager.get_status()
        
        if not status['context7_api']:
            click.echo("‚ùå Context7 API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        from context7_helper.searcher import SearchQuery
        
        test_query = SearchQuery(
            action_name="test_search",
            description="Test search functionality",
            language="python"
        )
        
        results = manager.searcher.search(test_query, top_k=1)
        
        if results:
            click.echo("‚úÖ Context7 Helper —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            click.echo(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
        else:
            click.echo("‚ö†Ô∏è  Context7 Helper —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}") 