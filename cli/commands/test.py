"""
–ö–æ–º–∞–Ω–¥–∞ test - –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
"""

import subprocess
import os
import logging

def run(service: str, verbose: bool, config, logger: logging.Logger):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã"""
    
    services = ['core-runner', 'tula-spec', 'shablon-spec'] if service == 'all' else [service]
    
    logger.info(f"–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤: {', '.join(services)}")
    
    all_passed = True
    
    for service_name in services:
        try:
            service_passed = _run_service_tests(service_name, verbose, config, logger)
            if not service_passed:
                all_passed = False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ {service_name}: {e}")
            all_passed = False
    
    if all_passed:
        logger.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        logger.error("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
    
    return all_passed

def _run_service_tests(service_name: str, verbose: bool, config, logger: logging.Logger) -> bool:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
    
    service_config = config.get_service_config(service_name)
    service_path = service_config.get('path', f'./{service_name}')
    
    logger.info(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {service_name}:")
    logger.info("="*50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists(service_path):
        logger.error(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {service_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    # –ò—â–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    test_files = _find_test_files(service_path)
    
    if not test_files:
        logger.warning(f"–¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è {service_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return True  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤
    
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(test_files)}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    passed = 0
    failed = 0
    
    for test_file in test_files:
        test_result = _run_test_file(test_file, verbose, logger)
        if test_result:
            passed += 1
        else:
            failed += 1
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {service_name}:")
    logger.info(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    logger.info(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    logger.info(f"   üìà –í—Å–µ–≥–æ: {passed + failed}")
    
    return failed == 0

def _find_test_files(service_path: str) -> list:
    """–ò—â–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    
    test_files = []
    
    # –ò—â–µ–º —Ñ–∞–π–ª—ã —Å —Ç–µ—Å—Ç–∞–º–∏
    test_patterns = [
        'test_*.py',
        '*_test.py',
        'tests/test_*.py',
        'tests/*_test.py'
    ]
    
    for pattern in test_patterns:
        import glob
        pattern_path = os.path.join(service_path, pattern)
        found_files = glob.glob(pattern_path)
        test_files.extend(found_files)
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    test_files = list(set(test_files))
    
    return test_files

def _run_test_file(test_file: str, verbose: bool, logger: logging.Logger) -> bool:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
    
    logger.info(f"–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {os.path.basename(test_file)}")
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
        cmd = ['python', '-m', 'pytest', test_file]
        
        if verbose:
            cmd.append('-v')
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
        result = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=120  # 2 –º–∏–Ω—É—Ç—ã –Ω–∞ —Ç–µ—Å—Ç
        )
        
        if result.returncode == 0:
            logger.info(f"‚úÖ {os.path.basename(test_file)} - –ü–†–û–ô–î–ï–ù")
            if verbose and result.stdout:
                print(result.stdout)
            return True
        else:
            logger.error(f"‚ùå {os.path.basename(test_file)} - –ü–†–û–í–ê–õ–ï–ù")
            if result.stdout:
                print(result.stdout)
            if result.stderr:
                print(result.stderr)
            return False
            
    except subprocess.TimeoutExpired:
        logger.error(f"‚è∞ {os.path.basename(test_file)} - –¢–ê–ô–ú–ê–£–¢")
        return False
    except Exception as e:
        logger.error(f"üí• {os.path.basename(test_file)} - –û–®–ò–ë–ö–ê: {e}")
        return False

def _run_integration_tests(config, logger: logging.Logger) -> bool:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
    
    logger.info("\nüîó –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:")
    logger.info("="*50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã
    from cli.commands.status import run as status_run
    
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    status_run(verbose=False, config=config, logger=logger)
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏
    
    logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
    return True 