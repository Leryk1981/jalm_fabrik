"""
–ö–æ–º–∞–Ω–¥–∞ status - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
"""

import subprocess
import requests
import logging
from typing import Dict, Any

def run(verbose: bool, config, logger: logging.Logger):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"""
    
    services = ['core-runner', 'tula-spec', 'shablon-spec']
    status_info = {}
    
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    for service_name in services:
        service_status = _check_service_status(service_name, config, logger, verbose)
        status_info[service_name] = service_status
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    _print_status_summary(status_info, logger)
    
    if verbose:
        _print_detailed_status(status_info, logger)
    
    return True

def _check_service_status(service_name: str, config, logger: logging.Logger, verbose: bool) -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
    
    service_config = config.get_service_config(service_name)
    port = service_config.get('port', 8000)
    
    status_info = {
        'name': service_name,
        'port': port,
        'docker_running': False,
        'api_responding': False,
        'health_check': False
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    docker_status = _check_docker_status(service_name, config, logger)
    status_info['docker_running'] = docker_status['running']
    status_info['docker_info'] = docker_status
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    if docker_status['running']:
        api_status = _check_api_status(service_name, port, logger)
        status_info['api_responding'] = api_status['responding']
        status_info['api_info'] = api_status
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º health check
        if api_status['responding']:
            health_status = _check_health_endpoint(service_name, port, logger)
            status_info['health_check'] = health_status['healthy']
            status_info['health_info'] = health_status
    
    return status_info

def _check_docker_status(service_name: str, config, logger: logging.Logger) -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
    
    try:
        # –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ –∏–º–µ–Ω–∏
        cmd = ['docker', 'ps', '--filter', f'name={service_name}', '--format', '{{.Names}}\t{{.Status}}\t{{.Ports}}']
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0 and result.stdout.strip():
            lines = result.stdout.strip().split('\n')
            for line in lines:
                if service_name in line:
                    parts = line.split('\t')
                    if len(parts) >= 2:
                        return {
                            'running': True,
                            'status': parts[1],
                            'ports': parts[2] if len(parts) > 2 else 'N/A'
                        }
        
        return {'running': False, 'status': 'Not found', 'ports': 'N/A'}
        
    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker –¥–ª—è {service_name}: {e}")
        return {'running': False, 'status': 'Error', 'ports': 'N/A'}

def _check_api_status(service_name: str, port: int, logger: logging.Logger) -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API"""
    
    try:
        url = f"http://localhost:{port}/"
        response = requests.get(url, timeout=5)
        
        return {
            'responding': True,
            'status_code': response.status_code,
            'response_time': response.elapsed.total_seconds()
        }
        
    except requests.exceptions.RequestException as e:
        logger.debug(f"API {service_name} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {e}")
        return {
            'responding': False,
            'status_code': None,
            'response_time': None
        }

def _check_health_endpoint(service_name: str, port: int, logger: logging.Logger) -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç health endpoint"""
    
    try:
        url = f"http://localhost:{port}/health"
        response = requests.get(url, timeout=5)
        
        if response.status_code == 200:
            try:
                health_data = response.json()
                return {
                    'healthy': True,
                    'data': health_data
                }
            except:
                return {
                    'healthy': True,
                    'data': {'status': 'ok'}
                }
        else:
            return {
                'healthy': False,
                'data': {'status': f'HTTP {response.status_code}'}
            }
            
    except requests.exceptions.RequestException as e:
        logger.debug(f"Health check –¥–ª—è {service_name} –Ω–µ —É–¥–∞–ª—Å—è: {e}")
        return {
            'healthy': False,
            'data': {'error': str(e)}
        }

def _print_status_summary(status_info: Dict[str, Any], logger: logging.Logger):
    """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É —Å—Ç–∞—Ç—É—Å–∞"""
    
    logger.info("\n" + "="*50)
    logger.info("–°–í–û–î–ö–ê –°–¢–ê–¢–£–°–ê –°–ï–†–í–ò–°–û–í")
    logger.info("="*50)
    
    for service_name, info in status_info.items():
        status_icon = "üü¢" if info['docker_running'] and info['api_responding'] else "üî¥"
        logger.info(f"{status_icon} {service_name:<15} | Docker: {'‚úÖ' if info['docker_running'] else '‚ùå'} | API: {'‚úÖ' if info['api_responding'] else '‚ùå'} | Health: {'‚úÖ' if info['health_check'] else '‚ùå'}")

def _print_detailed_status(status_info: Dict[str, Any], logger: logging.Logger):
    """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ"""
    
    logger.info("\n" + "="*50)
    logger.info("–î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø")
    logger.info("="*50)
    
    for service_name, info in status_info.items():
        logger.info(f"\nüìã {service_name.upper()}")
        logger.info(f"   –ü–æ—Ä—Ç: {info['port']}")
        logger.info(f"   Docker: {info['docker_info']['status']}")
        
        if info['api_responding']:
            logger.info(f"   API: ‚úÖ (HTTP {info['api_info']['status_code']}, {info['api_info']['response_time']:.3f}s)")
            if info['health_check']:
                logger.info(f"   Health: ‚úÖ {info['health_info']['data']}")
            else:
                logger.info(f"   Health: ‚ùå {info['health_info']['data']}")
        else:
            logger.info(f"   API: ‚ùå –ù–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
            logger.info(f"   Health: ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω") 