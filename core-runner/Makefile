# JALM Core Runner Makefile
# –≠—Ç–∞–ø 5 Core Spec: make kernel —Å–æ–±–∏—Ä–∞–µ—Ç –æ–±—Ä–∞–∑ jalm/core-runner:VERSION

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
VERSION ?= $(shell git describe --tags --always --dirty)
IMAGE_NAME = jalm/core-runner
REGISTRY = ghcr.io
FULL_IMAGE_NAME = $(REGISTRY)/$(IMAGE_NAME):$(VERSION)
LATEST_IMAGE_NAME = $(REGISTRY)/$(IMAGE_NAME):latest

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED = \033[0;31m
GREEN = \033[0;32m
YELLOW = \033[1;33m
BLUE = \033[0;34m
NC = \033[0m # No Color

.PHONY: help kernel_raw kernel_group kernel_cards search_isolate kernel_build kernel_push kernel_test kernel_clean

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
	@echo "$(BLUE)JALM Core Runner - –ö–æ–º–∞–Ω–¥—ã —Å–±–æ—Ä–∫–∏$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(GREEN)%-20s$(NC) %s\n", $$1, $$2}'

kernel_raw: ## –≠—Ç–∞–ø 1: –í—ã—á–ª–µ–Ω–µ–Ω–∏–µ –∞—Ç–æ–º–æ–≤ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
	@echo "$(YELLOW)üîç –≠—Ç–∞–ø 1: –í—ã—á–ª–µ–Ω–µ–Ω–∏–µ –∞—Ç–æ–º–æ–≤ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è$(NC)"
	@if [ ! -f kernel/raw_atomics.csv ]; then \
		echo "$(RED)‚ùå –§–∞–π–ª kernel/raw_atomics.csv –Ω–µ –Ω–∞–π–¥–µ–Ω$(NC)"; \
		exit 1; \
	fi
	@echo "$(GREEN)‚úÖ –ê—Ç–æ–º—ã –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã: $(shell wc -l < kernel/raw_atomics.csv) –∑–∞–ø–∏—Å–µ–π$(NC)"

kernel_group: ## –≠—Ç–∞–ø 2: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∞—Ç–æ–º–æ–≤ –≤ —Å–ª–æ–∏
	@echo "$(YELLOW)üìä –≠—Ç–∞–ø 2: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∞—Ç–æ–º–æ–≤ –≤ —Å–ª–æ–∏$(NC)"
	@if [ ! -f kernel/layers.json ]; then \
		echo "$(RED)‚ùå –§–∞–π–ª kernel/layers.json –Ω–µ –Ω–∞–π–¥–µ–Ω$(NC)"; \
		exit 1; \
	fi
	@echo "$(GREEN)‚úÖ –°–ª–æ–∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã: $(shell jq '.metadata.total_layers' kernel/layers.json) —Å–ª–æ—ë–≤$(NC)"

kernel_cards: ## –≠—Ç–∞–ø 3: –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —à–∞–≥–∏-–∫–∞—Ä—Ç–æ—á–∫–∏
	@echo "$(YELLOW)üìã –≠—Ç–∞–ø 3: –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —à–∞–≥–∏-–∫–∞—Ä—Ç–æ—á–∫–∏$(NC)"
	@if [ ! -d kernel/step_cards ]; then \
		echo "$(RED)‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è kernel/step_cards –Ω–µ –Ω–∞–π–¥–µ–Ω–∞$(NC)"; \
		exit 1; \
	fi
	@echo "$(GREEN)‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∏ —à–∞–≥–æ–≤ –≥–æ—Ç–æ–≤—ã: $(shell ls kernel/step_cards/*.yml | wc -l) –∫–∞—Ä—Ç–æ—á–µ–∫$(NC)"

search_isolate: ## –≠—Ç–∞–ø 4: –ü–æ–∏—Å–∫ –≥–æ—Ç–æ–≤—ã—Ö –¥–≤–∏–∂–∫–æ–≤
	@echo "$(YELLOW)üîç –≠—Ç–∞–ø 4: –ü–æ–∏—Å–∫ –≥–æ—Ç–æ–≤—ã—Ö –¥–≤–∏–∂–∫–æ–≤$(NC)"
	@if [ ! -f scripts/search_micro_isolates.py ]; then \
		echo "$(RED)‚ùå –°–∫—Ä–∏–ø—Ç –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω$(NC)"; \
		exit 1; \
	fi
	@python scripts/search_micro_isolates.py
	@echo "$(GREEN)‚úÖ –ü–æ–∏—Å–∫ –¥–≤–∏–∂–∫–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω$(NC)"

kernel_build: ## –≠—Ç–∞–ø 5: –°–±–æ—Ä–∫–∞ —è–¥—Ä–∞
	@echo "$(YELLOW)üî® –≠—Ç–∞–ø 5: –°–±–æ—Ä–∫–∞ —è–¥—Ä–∞ jalm/core-runner:$(VERSION)$(NC)"
	@if [ ! -f Dockerfile ]; then \
		echo "$(RED)‚ùå Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω$(NC)"; \
		exit 1; \
	fi
	@if [ ! -f requirements.txt ]; then \
		echo "$(RED)‚ùå requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω$(NC)"; \
		exit 1; \
	fi
	docker build -t $(IMAGE_NAME):$(VERSION) -t $(IMAGE_NAME):latest .
	@echo "$(GREEN)‚úÖ –û–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω: $(IMAGE_NAME):$(VERSION)$(NC)"

kernel_push: ## –≠—Ç–∞–ø 6: –ü—É–±–ª–∏–∫–∞—Ü–∏—è —è–¥—Ä–∞ –≤ registry
	@echo "$(YELLOW)üöÄ –≠—Ç–∞–ø 6: –ü—É–±–ª–∏–∫–∞—Ü–∏—è —è–¥—Ä–∞ –≤ registry$(NC)"
	@if [ -z "$(DOCKER_USERNAME)" ] || [ -z "$(DOCKER_PASSWORD)" ]; then \
		echo "$(RED)‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ DOCKER_USERNAME –∏ DOCKER_PASSWORD –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(NC)"; \
		exit 1; \
	fi
	docker tag $(IMAGE_NAME):$(VERSION) $(FULL_IMAGE_NAME)
	docker tag $(IMAGE_NAME):$(VERSION) $(LATEST_IMAGE_NAME)
	docker push $(FULL_IMAGE_NAME)
	docker push $(LATEST_IMAGE_NAME)
	@echo "$(GREEN)‚úÖ –û–±—Ä–∞–∑ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: $(FULL_IMAGE_NAME)$(NC)"

kernel_test: ## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è–¥—Ä–∞
	@echo "$(YELLOW)üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è–¥—Ä–∞$(NC)"
	@if [ ! -f kernel/src/main.py ]; then \
		echo "$(RED)‚ùå –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —è–¥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω$(NC)"; \
		exit 1; \
	fi
	@echo "$(GREEN)‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ$(NC)"

kernel_clean: ## –û—á–∏—Å—Ç–∫–∞ —Å–±–æ—Ä–∫–∏
	@echo "$(YELLOW)üßπ –û—á–∏—Å—Ç–∫–∞ —Å–±–æ—Ä–∫–∏$(NC)"
	docker rmi $(IMAGE_NAME):$(VERSION) $(IMAGE_NAME):latest 2>/dev/null || true
	docker system prune -f
	@echo "$(GREEN)‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
kernel: kernel_raw kernel_group kernel_cards search_isolate kernel_build ## –ü–æ–ª–Ω–∞—è —Å–±–æ—Ä–∫–∞ —è–¥—Ä–∞
	@echo "$(GREEN)üéâ –Ø–¥—Ä–æ JALM Core Runner —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–æ!$(NC)"

kernel_full: kernel kernel_test kernel_push ## –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: —Å–±–æ—Ä–∫–∞ + —Ç–µ—Å—Ç + –ø—É–±–ª–∏–∫–∞—Ü–∏—è
	@echo "$(GREEN)üéâ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–±–æ—Ä–∫–∏ —è–¥—Ä–∞ –∑–∞–≤–µ—Ä—à—ë–Ω!$(NC)"

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
dev_setup: ## –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(YELLOW)üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏$(NC)"
	python -m venv venv
	. venv/bin/activate && pip install -r requirements.txt
	@echo "$(GREEN)‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≥–æ—Ç–æ–≤–æ$(NC)"

dev_run: ## –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(YELLOW)üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏$(NC)"
	uvicorn kernel.src.main:app --reload --host 0.0.0.0 --port 8888

dev_test: ## –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(YELLOW)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏$(NC)"
	python -m pytest tests/ -v

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
logs: ## –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
	@echo "$(YELLOW)üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤$(NC)"
	docker logs -f $(IMAGE_NAME):$(VERSION)

status: ## –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
	@echo "$(YELLOW)üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞$(NC)"
	curl -s http://localhost:8888/health | jq .

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏—è
deploy_local: kernel_build ## –†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
	@echo "$(YELLOW)üöÄ –†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ$(NC)"
	docker run -d --name jalm-core-runner -p 8888:8888 $(IMAGE_NAME):$(VERSION)
	@echo "$(GREEN)‚úÖ –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8888$(NC)"

deploy_stop: ## –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏—è
	@echo "$(YELLOW)üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏—è$(NC)"
	docker stop jalm-core-runner || true
	docker rm jalm-core-runner || true
	@echo "$(GREEN)‚úÖ –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω$(NC)" 