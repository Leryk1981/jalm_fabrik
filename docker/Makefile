# JALM Full Stack Docker Management
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ç–æ–≤—ã–º –ø—Ä–æ–¥—É–∫—Ç–æ–º - SaaS-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å LLM-—è–¥—Ä–æ–º

.PHONY: help build run stop restart logs clean status health test

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
COMPOSE_FILE = docker-compose.yml

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
NC = \033[0m # No Color

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
	@echo "$(GREEN)JALM Full Stack - –ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç$(NC)"
	@echo "====================================="
	@echo ""
	@echo "$(YELLOW)–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞:$(NC)"
	@echo "  - Core Runner (–ø–æ—Ä—Ç 8000): –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —è–¥—Ä–æ"
	@echo "  - Tula Spec (–ø–æ—Ä—Ç 8001): –ö–∞—Ç–∞–ª–æ–≥ —Ñ—É–Ω–∫—Ü–∏–π"
	@echo "  - Shablon Spec (–ø–æ—Ä—Ç 8002): –ö–∞—Ç–∞–ª–æ–≥ —à–∞–±–ª–æ–Ω–æ–≤"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(YELLOW)%-15s$(NC) %s\n", $$1, $$2}'

build: ## –°–æ–±—Ä–∞—Ç—å –≤—Å–µ Docker –æ–±—Ä–∞–∑—ã
	@echo "$(GREEN)üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤ JALM Full Stack...$(NC)"
	docker-compose -f $(COMPOSE_FILE) build --no-cache
	@echo "$(GREEN)‚úÖ –í—Å–µ –æ–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ$(NC)"

build-fast: ## –ë—ã—Å—Ç—Ä–∞—è —Å–±–æ—Ä–∫–∞ (–±–µ–∑ --no-cache)
	@echo "$(GREEN)üî® –ë—ã—Å—Ç—Ä–∞—è —Å–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤...$(NC)"
	docker-compose -f $(COMPOSE_FILE) build
	@echo "$(GREEN)‚úÖ –í—Å–µ –æ–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ$(NC)"

run: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
	@echo "$(GREEN)üöÄ –ó–∞–ø—É—Å–∫ JALM Full Stack - –≥–æ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞...$(NC)"
	docker-compose -f $(COMPOSE_FILE) up -d
	@echo "$(GREEN)‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã$(NC)"
	@echo "$(YELLOW)üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:$(NC)"
	@echo "   - Core Runner: http://localhost:8000"
	@echo "   - Tula Spec: http://localhost:8001"
	@echo "   - Shablon Spec: http://localhost:8002"

stop: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
	@echo "$(YELLOW)üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	docker-compose -f $(COMPOSE_FILE) down
	@echo "$(GREEN)‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

restart: ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
	@echo "$(YELLOW)üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	docker-compose -f $(COMPOSE_FILE) restart
	@echo "$(GREEN)‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã$(NC)"

logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(GREEN)üìã –õ–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:$(NC)"
	docker-compose -f $(COMPOSE_FILE) logs -f

logs-core: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ Core Runner
	@echo "$(GREEN)üìã –õ–æ–≥–∏ Core Runner:$(NC)"
	docker-compose -f $(COMPOSE_FILE) logs -f core-runner

logs-tula: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ Tula Spec
	@echo "$(GREEN)üìã –õ–æ–≥–∏ Tula Spec:$(NC)"
	docker-compose -f $(COMPOSE_FILE) logs -f tula-spec

logs-shablon: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ Shablon Spec
	@echo "$(GREEN)üìã –õ–æ–≥–∏ Shablon Spec:$(NC)"
	docker-compose -f $(COMPOSE_FILE) logs -f shablon-spec

status: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(GREEN)üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:$(NC)"
	docker-compose -f $(COMPOSE_FILE) ps

health: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(GREEN)üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	@for port in 8000 8001 8002; do \
		echo -n "–ü–æ—Ä—Ç $$port: "; \
		curl -s -o /dev/null -w "%{http_code}" http://localhost:$$port/health 2>/dev/null || echo "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"; \
	done

test: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –≥–æ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
	@echo "$(GREEN)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≥–æ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞...$(NC)"
	@echo "$(YELLOW)–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Core Runner...$(NC)"
	curl -f http://localhost:8000/health || echo "‚ùå Core Runner –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
	@echo "$(YELLOW)–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Tula Spec...$(NC)"
	curl -f http://localhost:8001/health || echo "‚ùå Tula Spec –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
	@echo "$(YELLOW)–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Shablon Spec...$(NC)"
	curl -f http://localhost:8002/health || echo "‚ùå Shablon Spec –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

shell-core: ## –í–æ–π—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Core Runner
	@echo "$(GREEN)üêö –í—Ö–æ–¥ –≤ Core Runner...$(NC)"
	docker-compose -f $(COMPOSE_FILE) exec core-runner /bin/sh

shell-tula: ## –í–æ–π—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Tula Spec
	@echo "$(GREEN)üêö –í—Ö–æ–¥ –≤ Tula Spec...$(NC)"
	docker-compose -f $(COMPOSE_FILE) exec tula-spec /bin/bash

shell-shablon: ## –í–æ–π—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Shablon Spec
	@echo "$(GREEN)üêö –í—Ö–æ–¥ –≤ Shablon Spec...$(NC)"
	docker-compose -f $(COMPOSE_FILE) exec shablon-spec /bin/bash

clean: ## –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –æ–±—Ä–∞–∑—ã, —Ç–æ–º–∞)
	@echo "$(RED)üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö Docker —Ä–µ—Å—É—Ä—Å–æ–≤...$(NC)"
	docker-compose -f $(COMPOSE_FILE) down -v --rmi all
	docker system prune -f
	@echo "$(GREEN)‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

clean-volumes: ## –û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ–º–∞
	@echo "$(YELLOW)üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ç–æ–º–æ–≤...$(NC)"
	docker-compose -f $(COMPOSE_FILE) down -v
	@echo "$(GREEN)‚úÖ –¢–æ–º–∞ –æ—á–∏—â–µ–Ω—ã$(NC)"

backup: ## –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö
	@echo "$(GREEN)üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...$(NC)"
	@mkdir -p backups
	@docker run --rm -v jalm_data:/data -v $(PWD)/backups:/backup alpine tar czf /backup/jalm_data_$(shell date +%Y%m%d_%H%M%S).tar.gz -C /data .
	@echo "$(GREEN)‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ –ø–∞–ø–∫–µ backups/$(NC)"

restore: ## –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
	@echo "$(YELLOW)üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...$(NC)"
	@if [ -z "$(BACKUP_FILE)" ]; then \
		echo "$(RED)‚ùå –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: make restore BACKUP_FILE=backups/filename.tar.gz$(NC)"; \
		exit 1; \
	fi
	@docker run --rm -v jalm_data:/data -v $(PWD)/$(BACKUP_FILE):/backup.tar.gz alpine sh -c "cd /data && tar xzf /backup.tar.gz"
	@echo "$(GREEN)‚úÖ –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

monitor: ## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
	@echo "$(GREEN)üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:$(NC)"
	docker stats jalm-core-runner jalm-tula-spec jalm-shablon-spec

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ç—å—é
network-info: ## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏
	@echo "$(GREEN)üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏:$(NC)"
	docker network ls | grep jalm
	docker network inspect docker_jalm-network 2>/dev/null || echo "–°–µ—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–º–∞–º–∏
volumes-info: ## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º–∞—Ö
	@echo "$(GREEN)üíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º–∞—Ö:$(NC)"
	docker volume ls | grep jalm
	@for volume in jalm_data jalm_logs; do \
		echo "–¢–æ–º $$volume:"; \
		docker volume inspect docker_$$volume 2>/dev/null | grep -E '"Mountpoint"|"Size"' || echo "  –ù–µ –Ω–∞–π–¥–µ–Ω"; \
	done 