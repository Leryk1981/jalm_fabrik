0. СКАФФОЛД ДЛЯ ШАБЛОНОВ
```
/jalm-templates/
├── templates/           # raw шаблонные архивы
├── docs/                # карточки шаблонов, step_map.yaml
├── registry-wizard/     # обёрточная машина
├── catalog/             # registry шаблонов *.template.json
├── dist/                # zip / tar bundles
└── docker-compose.yml   # локальный playground
```


------------------------------------------------
Этап 1. сбор «сырых» пунктов к маркет-месту  
Выход – CSV:  
filename: `research/raw_patterns.csv`  
модель: `domain|use_case|trigger|channel|block`  
(пример: `haircut_booking|online_widget|client_open_page|widget.js|must_cancel`)


------------------------------------------------
Этап 2. кластеризация в «шаблон-группы»  
filename: `research/template_groups.json`  
8 групп:  
- booking_default  
- payment_split  
- staff_shift_excel  
- inventory_xlsx  
- social_stream  
- feedback_push  
- report_daily  
- crm_light  


------------------------------------------------
Этап 3. разбор в конкретные маршруты (template-steps)  
filename: `docs/template_cards/002-card.yaml`  
пример:  
```
id:          booking_default
entry_step:  load_widget
steps:
  - id: collect_timeslot (client/to frontend)
  - id: send_booking (frontend/to backend)
  - id: slot_confirm_sms (system/to client)
actor_start: client
triggers: [page_load, user_click, sys_timer]
```


------------------------------------------------
Этап 4. поиск готовых шаблонов / сниппетов  
скрипт: `scripts/collect_templates.py`  
- запрос в Context7: `"booking widget js tailwind template" OR "payment modal vue component"`  
- собранные ссылки → `tool_candidates/template_realization.json`


------------------------------------------------
Этап 5. обёртка в семь штук meta-файлов  
скрипт: `registry-wizard/wrap_template.py`  
- cookiecutter-формат ставит файлы в `templates/$name/`  
- Dockerfile для root Vue-widget или Python-Flask landing  
- версия кладётся в `templates/$name/VERSION`


------------------------------------------------
Этап 6. публикация в catalog шаблонов  
file: `catalog/$name.template.json`  
окончательный индекс:  
```
{
 "template_id":"booking_default",
 "type":"widget",
 "deploy_cmd":"docker run -e APP_KEY jalm/templates_booking:1.0.0",
 "requires":["POSTGRES_URL","WIDGET_ID"],
 "next_templates":[ "payment_split", "feedback_push" ]
}
```


------------------------------------------------
RUN-однострочник шаблонов
```
$ make templates       # stage 1-2
$ make search_tpl      # 3-4
$ make wrap_tpl NAME=booking_default  # 5
$ make publish_tpl     # 6 → catalog/*.template.json
`docker-compose -f templates.yml up` — поднимает UI-браузер шаблонов.      Полный 6-этапный стек «исполнительного ядра»  
(cедьмая часть фреймворка JALM — то, что на лету выполняет шаблоны и tulpa-код)

