#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ API –º–æ–¥—É–ª–µ–π JALM Full Stack
"""

import sys
from pathlib import Path

def test_tula_spec_api_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ Tula Spec API"""
    print("=== –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ Tula Spec API ===")
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ API
        sys.path.append(str(Path("tula_spec/api")))
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
        import main as tula_api
        
        print("‚úÖ Tula Spec API –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        if hasattr(tula_api, 'app'):
            print("‚úÖ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print("‚ùå FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        if hasattr(tula_api, 'load_registry'):
            print("‚úÖ –§—É–Ω–∫—Ü–∏—è load_registry –Ω–∞–π–¥–µ–Ω–∞")
        else:
            print("‚ùå –§—É–Ω–∫—Ü–∏—è load_registry –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        if hasattr(tula_api, 'load_function'):
            print("‚úÖ –§—É–Ω–∫—Ü–∏—è load_function –Ω–∞–π–¥–µ–Ω–∞")
        else:
            print("‚ùå –§—É–Ω–∫—Ü–∏—è load_function –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Tula Spec API: {e}")
        return False

def test_shablon_spec_api_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ Shablon Spec API"""
    print("\n=== –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ Shablon Spec API ===")
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ API
        sys.path.append(str(Path("shablon_spec/api")))
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
        import main as shablon_api
        
        print("‚úÖ Shablon Spec API –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        if hasattr(shablon_api, 'app'):
            print("‚úÖ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print("‚ùå FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        if hasattr(shablon_api, 'load_registry'):
            print("‚úÖ –§—É–Ω–∫—Ü–∏—è load_registry –Ω–∞–π–¥–µ–Ω–∞")
        else:
            print("‚ùå –§—É–Ω–∫—Ü–∏—è load_registry –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        if hasattr(shablon_api, 'validate_jalm_syntax'):
            print("‚úÖ –§—É–Ω–∫—Ü–∏—è validate_jalm_syntax –Ω–∞–π–¥–µ–Ω–∞")
        else:
            print("‚ùå –§—É–Ω–∫—Ü–∏—è validate_jalm_syntax –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Shablon Spec API: {e}")
        return False

def test_core_runner_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ Core Runner"""
    print("\n=== –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ Core Runner ===")
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ kernel
        sys.path.append(str(Path("core-runner/kernel/src")))
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
        import main as core_runner
        
        print("‚úÖ Core Runner –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        if hasattr(core_runner, 'execute_jalm'):
            print("‚úÖ –§—É–Ω–∫—Ü–∏—è execute_jalm –Ω–∞–π–¥–µ–Ω–∞")
        else:
            print("‚ùå –§—É–Ω–∫—Ü–∏—è execute_jalm –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Core Runner: {e}")
        return False

def test_requirements_files():
    """–¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤ requirements"""
    print("\n=== –¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤ requirements ===")
    
    requirements_files = [
        "core-runner/requirements.txt",
        "tula_spec/requirements.txt",
        "shablon_spec/requirements.txt"
    ]
    
    all_exist = True
    
    for req_file in requirements_files:
        if Path(req_file).exists():
            print(f"‚úÖ {req_file} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            with open(req_file, 'r') as f:
                content = f.read()
                if 'fastapi' in content.lower():
                    print(f"   ‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç FastAPI")
                else:
                    print(f"   ‚ö†Ô∏è –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç FastAPI")
        else:
            print(f"‚ùå {req_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            all_exist = False
    
    return all_exist

def test_dockerfiles():
    """–¢–µ—Å—Ç Dockerfile"""
    print("\n=== –¢–µ—Å—Ç Dockerfile ===")
    
    dockerfiles = [
        "core-runner/kernel/Dockerfile",
        "tula_spec/Dockerfile",
        "shablon_spec/Dockerfile"
    ]
    
    all_exist = True
    
    for dockerfile in dockerfiles:
        if Path(dockerfile).exists():
            print(f"‚úÖ {dockerfile} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            with open(dockerfile, 'r') as f:
                content = f.read()
                if 'python' in content.lower():
                    print(f"   ‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç Python")
                else:
                    print(f"   ‚ö†Ô∏è –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç Python")
        else:
            print(f"‚ùå {dockerfile} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            all_exist = False
    
    return all_exist

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ API –º–æ–¥—É–ª–µ–π JALM Full Stack")
    print("=" * 60)
    
    results = {}
    
    # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ API
    results["tula_spec_api"] = test_tula_spec_api_import()
    results["shablon_spec_api"] = test_shablon_spec_api_import()
    results["core_runner"] = test_core_runner_import()
    
    # –¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤
    results["requirements"] = test_requirements_files()
    results["dockerfiles"] = test_dockerfiles()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ê –ò–ú–ü–û–†–¢–ê")
    print("=" * 60)
    
    total_tests = len(results)
    passed_tests = sum(results.values())
    
    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name.replace('_', ' ').title()}: {status}")
    
    print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"  –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    print(f"  –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - passed_tests}")
    
    if total_tests > 0:
        success_rate = (passed_tests / total_tests) * 100
        print(f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        if success_rate == 100:
            print("  üéâ –û–¢–õ–ò–ß–ù–û! –í—Å–µ API –º–æ–¥—É–ª–∏ –≥–æ—Ç–æ–≤—ã –∫ –∑–∞–ø—É—Å–∫—É!")
        elif success_rate >= 80:
            print("  ‚úÖ –•–û–†–û–®–û! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π –≥–æ—Ç–æ–≤—ã.")
        else:
            print("  ‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø! –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –º–æ–¥—É–ª—è–º–∏.")

if __name__ == "__main__":
    main() 