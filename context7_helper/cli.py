"""
CLI –¥–ª—è Context7 Helper - –∫–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–º –∫–æ–¥–∞

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–∞, –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å JALM Full Stack.
"""

import argparse
import logging
import json
import sys
from pathlib import Path
from typing import Optional
from .integration import IntegrationManager

logger = logging.getLogger(__name__)

def setup_logging(verbose: bool = False):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    level = logging.DEBUG if verbose else logging.INFO
    logging.basicConfig(
        level=level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(sys.stdout)
        ]
    )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(
        description="Context7 Helper - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∫–æ–¥–∞ –¥–ª—è JALM Full Stack",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  context7 search --query "booking system" --top-k 5
  context7 generate --research-dir research --top-k 3
  context7 status
  context7 cleanup --days 7
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ search
    search_parser = subparsers.add_parser('search', help='–ü–æ–∏—Å–∫ –∫–æ–¥–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É')
    search_parser.add_argument('--query', required=True, help='–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å')
    search_parser.add_argument('--language', default='python', help='–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è')
    search_parser.add_argument('--top-k', type=int, default=5, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    search_parser.add_argument('--output', help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    
    # –ö–æ–º–∞–Ω–¥–∞ generate
    generate_parser = subparsers.add_parser('generate', help='–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏–∑ Research Layer')
    generate_parser.add_argument('--research-dir', default='research', help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π')
    generate_parser.add_argument('--top-k', type=int, default=3, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å')
    generate_parser.add_argument('--output-dir', default='tool_candidates', help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è')
    
    # –ö–æ–º–∞–Ω–¥–∞ status
    status_parser = subparsers.add_parser('status', help='–°—Ç–∞—Ç—É—Å Context7 Helper')
    
    # –ö–æ–º–∞–Ω–¥–∞ cleanup
    cleanup_parser = subparsers.add_parser('cleanup', help='–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤')
    cleanup_parser.add_argument('--days', type=int, default=7, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è')
    
    # –û–±—â–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    parser.add_argument('--verbose', '-v', action='store_true', help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
    parser.add_argument('--api-key', help='API –∫–ª—é—á –¥–ª—è Context7')
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging(args.verbose)
    
    if not args.command:
        parser.print_help()
        return 1
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        manager = IntegrationManager(api_key=args.api_key)
        
        if args.command == 'search':
            return handle_search(manager, args)
        elif args.command == 'generate':
            return handle_generate(manager, args)
        elif args.command == 'status':
            return handle_status(manager, args)
        elif args.command == 'cleanup':
            return handle_cleanup(manager, args)
        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {args.command}")
            return 1
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        return 1

def handle_search(manager: IntegrationManager, args) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã search"""
    logger.info(f"–ü–æ–∏—Å–∫ –∫–æ–¥–∞: {args.query}")
    
    try:
        from .searcher import SearchQuery
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        query = SearchQuery(
            action_name=args.query,
            description=args.query,
            language=args.language
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        results = manager.searcher.search(query, args.top_k)
        
        if not results:
            logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return 0
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\n–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n")
        
        for i, result in enumerate(results, 1):
            print(f"{i}. {result.function_name}")
            print(f"   –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {result.repo}")
            print(f"   –§–∞–π–ª: {result.source_file}")
            print(f"   –°–∫–æ—Ä: {result.score:.3f}")
            print(f"   –ó–≤–µ–∑–¥—ã: {result.stars}")
            print(f"   –õ–∏—Ü–µ–Ω–∑–∏—è: {result.license}")
            print(f"   –ü—Ä–∏–º–µ—Ä: {result.example[:100]}...")
            print()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if args.output:
            output_data = []
            for result in results:
                output_data.append({
                    "function_name": result.function_name,
                    "repo": result.repo,
                    "file_path": result.source_file,
                    "score": result.score,
                    "stars": result.stars,
                    "license": result.license,
                    "example": result.example
                })
            
            with open(args.output, 'w', encoding='utf-8') as f:
                json.dump(output_data, f, indent=2, ensure_ascii=False)
            
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {args.output}")
        
        return 0
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        return 1

def handle_generate(manager: IntegrationManager, args) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã generate"""
    logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏–∑ {args.research_dir}")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω
        result = manager.run_full_pipeline(args.research_dir, args.top_k)
        
        if not result["success"]:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return 1
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
        print(f"\n‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–π: {result['processed_actions']}")
        print(f"üîç –ü–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {result['search_queries']}")
        print(f"üéØ –°–æ–∑–¥–∞–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {result['generated_candidates']}")
        
        if result['categories']:
            print(f"\nüìÇ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
            for category, count in result['categories'].items():
                print(f"   {category}: {count}")
        
        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:")
        for file_type, paths in result['saved_files'].items():
            if isinstance(paths, list):
                print(f"   {file_type}: {len(paths)} —Ñ–∞–π–ª–æ–≤")
            else:
                print(f"   {file_type}: {paths}")
        
        return 0
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return 1

def handle_status(manager: IntegrationManager, args) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã status"""
    logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ Context7 Helper")
    
    try:
        status = manager.get_status()
        
        print(f"\nüìä –°—Ç–∞—Ç—É—Å Context7 Helper:")
        print(f"üîå Context7 API: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if status['context7_api'] else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–∞: {status['output_directory']}")
        print(f"üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {'‚úÖ –î–∞' if status['output_directory_exists'] else '‚ùå –ù–µ—Ç'}")
        print(f"üéØ –í—Å–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {status['candidates_count']}")
        
        if status['categories']:
            print(f"\nüìÇ –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
            for category, count in status['categories'].items():
                print(f"   {category}: {count}")
        
        return 0
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return 1

def handle_cleanup(manager: IntegrationManager, args) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã cleanup"""
    logger.info(f"–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (—Å—Ç–∞—Ä—à–µ {args.days} –¥–Ω–µ–π)")
    
    try:
        deleted_count = manager.cleanup_old_candidates(args.days)
        
        print(f"\nüßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {deleted_count}")
        
        return 0
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 