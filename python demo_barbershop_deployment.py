üì¶ **JALM FULL STACK ‚Äî B.O.M. 2024-06-12**  
(root: `/jalm-stack/`)


| –ö–æ–º–ø–æ–Ω–µ–Ω—Ç | –ß—Ç–æ –¥–µ–ª–∞–µ—Ç | –ê—Ä—Ç–µ—Ñ–∞–∫—Ç | Source |
|-----------|------------|----------|--------|
| **Research Layer** | —Å–±–æ—Ä –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π / –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ | `research/*.csv` | —ç—Ç–∞–ø 1 |
| **Core Templates** | –≥–æ—Ç–æ–≤—ã–µ —Ç–∏–ø–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è (widget, booking, CRON –∏ —Ç.–¥.) | `catalog/*.template.json` | —ç—Ç–∞–ø 6 (templates) |
| **Tula Registry** | –º–∏–∫—Ä–æ-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ —Ñ—É–Ω–∫—Ü–∏–π (FastAPI, Lambda, Go) | `tool_catalog/*.api.json` | —ç—Ç–∞–ø 6 (tulas) |
| **Runner Engine** | —Å—Ä–µ–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è tula/—à–∞–±–ª–æ–Ω–æ–≤, –∏–∑–æ–ª—è—Ü–∏—è, —à–µ–¥—É–ª–µ—Ä | `catalog/core-runner.engine.json` | —ç—Ç–∞–ø 6 |
| **Context7 Helper** | –ø–æ–∏—Å–∫ –≥–æ—Ç–æ–≤–æ–≥–æ –∫–æ–¥–∞ | `scripts/collector.py / Context7 API` | —ç—Ç–∞–ø 4 |
| **Packaging Wizard** | cookiecutter ‚Üí Dockerfile ‚Üí CI | `registry-wizard/` | —ç—Ç–∞–ø 5 |
| **CLI** | –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–µ `jalms up booking_light` | `cli/bin/jalm` |
| **External Aries** | Market place UI | `ui-market/` |
| **Runtime deps** | `docker-compose.yml` + `infra/postgres` + `redis` |


---


üöÄ –õ–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç –≤—Å–µ–≥–æ —Å—Ç–µ–∫–∞  
```
git clone git@github.com:jalm/jalm-stack.git
cd jalm-stack
docker compose up   # –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è:
# - catalog (catalog-ui)
# - core-runner
# - postgres
# - redis
# - registry-wizard watcher
```


---


üîö –ß–µ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∞–ª–æ  
- –µ–¥–∏–Ω–æ–≥–æ `docker-compose.yml` –≤ –∫–æ—Ä–Ω–µ (—Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å)  
- –µ–¥–∏–Ω–æ–π `diagram-architecture.mermaid` (–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ç—å –∏–∑ `.yaml`)  
- README-—Ñ–∞–π–ª–∞ —Å cross-references (–¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ)


‚Üí —Å—Ç–µ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ª–æ–∂–µ–Ω.  ```markdown
# JALM-Stack README
Unified 6-layer meta-framework (research ‚Üí runtime) for no-/low-code micro-assembly.


## üì¶ Contents
- `/research/`         ‚Äì raw actions, patterns, datasets
- `/templates/`        ‚Äì cookiecutter micro-frontends & services
- `/tulas/`            ‚Äì compiled function bundles
- `/core-runner/`      ‚Äì execution engine
- `/tool_catalog/`     ‚Äì registry JSON(indexes)
- `/docker-compose.yml` ‚Äì one-liner runtime
- `Makefile`           ‚Äì task flows
- `/docs/`             ‚Äì API & architecture


---


## Quick-Start (local)
```bash
git clone https://github.com/jalm/stack.git
cd stack
docker compose up        # spins-up:  
# - catalog-ui (http://localhost:3000)
# - core-runner (port 8888)
# - postgres://localhost:5432/jalm
```


Access the **Builder Frontend** at http://localhost:3000  
Drag-in templates, hit ‚ÄúDeploy‚Äù ‚Üí handled by `/core-runner`.


---


## 6-Stage Pipeline
1. **Collect**: interview ‚Üí `research/raw_actions.csv` / `raw_patterns.csv`
2. **Cluster**: `research/grouped.json` (8 domains)
3. **Step-Map**: per-cluster micro-flow YAML cards `docs/step_cards/*.yaml`
4. **Context7**: auto-search snippets ‚Üí `tool_candidates/`
5. **Wrap**: cookiecutter builds ‚Üí `templates/` & `tulas/`)
6. **Publish**: registry files `tool_catalog/*.api.json` & `*.template.json`


Run each stage explicitly:
```bash
make stage-1   # Collect
make stage-2   # Cluster
...
make stage-6   # Publish
```


---


## Artifacts


| Stream       | Path                          | Purpose                                                |
|--------------|-------------------------------|--------------------------------------------------------|
| RESEARCH     | `research/raw_*.csv`          | Source material (actions & patterns)                   |
| TEMPLATES    | `templates/{name}/`           | Instant-fork widgets / services                        |
| TULAS        | `tulas/{name}/`               | micro-API bundles (docker-ready)                       |
| ENGINE       | `catalog/core-runner.engine.json` | single image ID for sandboxed execution            |
| REGISTRY     | `tool_catalog/*.[api/template].json` | searchable repo for CLI & frontend           |


---


## Dev Workflow (scenarios)


### 1. Add new business action  
```bash
echo 'pick_service,client,widget,daily,payment' \
  >> research/raw_actions.csv
make stage-2 stage-3 stage-4
```
A proposed CI step auto-wraps changes and opens a PR.


### 2. Experiment with template
```bash
make up template=booking_light
docker run -p 4000:80 jalm/templates_booking_light
```


### 3. Override engine layer
```bash
make kernel_build   # rebuilds core-runner
make kernel_push
docker compose up --force-recreate core-runner
```


---


## API Overview
| Component         | Endpoint                                      | Auth | Docs |
|-------------------|-----------------------------------------------|------|------|
| `catalog-ui`      | `GET /v1/templates`, `/v1/apis`               | none | Swagger |
| `core-runner`     | `POST /exec/{tula_id}`                        | JWT  | http://localhost:8888/docs |
| `registry webhook`| `POST /hooks/push` (GitHub Actions)           | secret | ‚Äì |


---


## Environment (defaults)
```env
POSTGRES_URL=postgres://jalm:secret@db:5432/jalm
REDIS_URL=redis://redis:6379
REGISTRY_TOKEN=your_github_token
```


---


## Contributing
1. Add aÊîØË°åbig pattern as `/research/patterns_pr_<id>.csv`
2. Open PR ‚Üí CI runs stages 2-6, produces preview branch.
3. Merge ‚Üí registry is auto-updated.


License: MIT  
Discord: https://discord.gg/jalm-stack
```       –†–µ–∞–ª—å–Ω–∞—è —Ç—Ä—É–¥–æ—ë–º–∫–æ—Å—Ç—å (—á–µ–ª–æ–≤–µ–∫–æ-—á–∞—Å—ã)


| –£—á–∞—Å—Ç–æ–∫                       | –ù–æ–≤–∏—á–∫–∏ | –°–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞* |
|------------------------------|---------|------------------|
| **Research + data** (st.1‚Äì2) | 40—á     | 10—á              |
| **Context7 ingestion** (st.4)| 20—á     | 6—á               |
| **CI tasks automation**      | 80—á     | 25—á              |
| **core-runner**              | 120—á    | 35—á              |
| **packaging wizard**         | 60—á     | 20—á              |
| **registry + UI catalog**    | 90—á     | 25—á              |
| **quality, tests, swagger**  | 70—á     | 20—á              |
| **docs/docker-compose**      | 30—á     | 6—á               |
| **contingency**              | 40—á     | 10—á              |
| **–ò—Ç–æ–≥–æ**                    | **530 —á** | **160 —á**        |


*¬´–°–∏–ª—å–Ω–∞—è¬ª = —Ç—Ä–∏ —Ä–∞–∑—Ä–∞–±–∞ (full-staff), –∑–Ω–∞—é—â–∏—Ö JALM stack –∑–∞ 18 –º. ‚ûû –¥–æ —Ä–µ–ª–∏–∑–∞ **1 –Ω–µ–¥–µ–ª—è**.
