#!/usr/bin/env python3
"""
–û—Ñ—Ñ–ª–∞–π–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JALM Full Stack
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
"""

import sys
import json
from pathlib import Path

def test_tula_spec_functions():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π Tula Spec"""
    print("=== –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π Tula Spec ===")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ—É–Ω–∫—Ü–∏—è–º
    sys.path.append(str(Path("tula_spec/functions")))
    
    try:
        # –¢–µ—Å—Ç slot_validator
        from slot_validator import create, _validate_input
        
        test_slot = {
            "slot": {
                "datetime": "2024-06-15T10:00:00Z",
                "duration": 60,
                "service_id": "123e4567-e89b-12d3-a456-426614174000"
            }
        }
        
        result = create(test_slot)
        print(f"‚úÖ slot_validator.create(): {result['status']}")
        
        # –¢–µ—Å—Ç booking_widget
        from booking_widget import create as create_widget
        
        widget_result = create_widget("123e4567-e89b-12d3-a456-426614174000", "user-123")
        print(f"‚úÖ booking_widget.create(): {widget_result['widget_id'][:8]}...")
        
        # –¢–µ—Å—Ç notify_system
        from notify_system import send
        
        notify_result = send("–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", "web", "test@example.com", "test")
        print(f"‚úÖ notify_system.send(): {notify_result['status']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π: {e}")
        return False

def test_shablon_spec_templates():
    """–¢–µ—Å—Ç —à–∞–±–ª–æ–Ω–æ–≤ Shablon Spec"""
    print("\n=== –¢–µ—Å—Ç —à–∞–±–ª–æ–Ω–æ–≤ Shablon Spec ===")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ API
    sys.path.append(str(Path("shablon_spec/api")))
    
    try:
        from main import validate_jalm_syntax, generate_hash, load_registry
        
        # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–µ—Å—Ç—Ä–∞
        registry = load_registry()
        print(f"‚úÖ –†–µ–µ—Å—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω: {registry['metadata']['total_templates']} —à–∞–±–ª–æ–Ω–æ–≤")
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤
        templates_dir = Path("shablon_spec/templates")
        
        for template_file in templates_dir.glob("*.jalm"):
            with open(template_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            validation = validate_jalm_syntax(content)
            print(f"‚úÖ {template_file.name}: {'–≤–∞–ª–∏–¥–µ–Ω' if validation.is_valid else '–Ω–µ–≤–∞–ª–∏–¥–µ–Ω'}")
            
            if validation.errors:
                print(f"   –û—à–∏–±–∫–∏: {validation.errors}")
            
            # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à–∞
            hash_value = generate_hash(content)
            print(f"   –•–µ—à: {hash_value[:8]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {e}")
        return False

def test_core_runner_components():
    """–¢–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Core Runner"""
    print("\n=== –¢–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Core Runner ===")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
        core_files = [
            "core-runner/kernel/src/main.py",
            "core-runner/Makefile",
            "catalog/core-runner.engine.json"
        ]
        
        for file_path in core_files:
            if Path(file_path).exists():
                print(f"‚úÖ {file_path} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"‚ùå {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–∞–ª–æ–≥–æ–≤
        core_dirs = [
            "core-runner/kernel/src",
            "core-runner/cfg",
            "core-runner/state-store"
        ]
        
        for dir_path in core_dirs:
            if Path(dir_path).exists():
                print(f"‚úÖ {dir_path} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"‚ùå {dir_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Core Runner: {e}")
        return False

def test_project_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    print("\n=== –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ ===")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        components = [
            "core-runner",
            "tula_spec", 
            "shablon_spec",
            "catalog",
            "FINAL_SPECIFICATION.md"
        ]
        
        for component in components:
            if Path(component).exists():
                print(f"‚úÖ {component} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"‚ùå {component} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—á–µ—Ç—ã
        reports = [
            "TULA_SPEC_REPORT.md",
            "SHABLON_SPEC_REPORT.md", 
            "JALM_FULL_STACK_COMPLETE.md"
        ]
        
        for report in reports:
            if Path(report).exists():
                print(f"‚úÖ {report} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"‚ùå {report} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –û—Ñ—Ñ–ª–∞–π–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JALM Full Stack")
    print("=" * 50)
    
    results = {}
    
    # –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
    results["project_structure"] = test_project_structure()
    
    # –¢–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Core Runner
    results["core_runner"] = test_core_runner_components()
    
    # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π Tula Spec
    results["tula_spec"] = test_tula_spec_functions()
    
    # –¢–µ—Å—Ç —à–∞–±–ª–æ–Ω–æ–≤ Shablon Spec
    results["shablon_spec"] = test_shablon_spec_templates()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –û–§–§–õ–ê–ô–ù –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    
    total_tests = len(results)
    passed_tests = sum(results.values())
    
    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name.replace('_', ' ').title()}: {status}")
    
    print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"  –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    print(f"  –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - passed_tests}")
    
    if total_tests > 0:
        success_rate = (passed_tests / total_tests) * 100
        print(f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        if success_rate == 100:
            print("  üéâ –û–¢–õ–ò–ß–ù–û! –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ –∑–∞–ø—É—Å–∫—É!")
        elif success_rate >= 75:
            print("  ‚úÖ –•–û–†–û–®–û! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≥–æ—Ç–æ–≤—ã.")
        else:
            print("  ‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø! –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏.")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    with open("offline_test_results.json", "w", encoding="utf-8") as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ offline_test_results.json")

if __name__ == "__main__":
    main() 