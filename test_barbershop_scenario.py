#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –±–∞—Ä–±–µ—Ä—à–æ–ø–∞ –¥–ª—è JALM Full Stack
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —á–µ—Ä–µ–∑ saas_provisioner.py
"""

import json
import requests
import csv
import time
import subprocess
import sys
from pathlib import Path
from typing import Dict, Any, List

class BarbershopScenarioTester:
    """–¢–µ—Å—Ç–µ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è –±–∞—Ä–±–µ—Ä—à–æ–ø–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π JALM Full Stack"""
    
    def __init__(self):
        self.base_urls = {
            "core_runner": "http://localhost:8000",
            "tula_spec": "http://localhost:8001", 
            "shablon_spec": "http://localhost:8002"
        }
        self.results = {}
        self.product_name = "ivan"
        self.product_path = f"instances/{self.product_name}"
    
    def test_jalm_services_health(self) -> Dict[str, bool]:
        """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è JALM —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print("=== –¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è JALM —Å–µ—Ä–≤–∏—Å–æ–≤ ===")
        health_results = {}
        
        for service, url in self.base_urls.items():
            try:
                response = requests.get(f"{url}/health", timeout=5)
                if response.status_code == 200:
                    print(f"‚úÖ {service} –∑–¥–æ—Ä–æ–≤")
                    health_results[f"{service}_health"] = True
                else:
                    print(f"‚ùå {service} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
                    health_results[f"{service}_health"] = False
            except Exception as e:
                print(f"‚ùå {service} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                health_results[f"{service}_health"] = False
        
        self.results["jalm_services_health"] = health_results
        return health_results
    
    def test_tula_spec_functions(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π Tula Spec"""
        print("\n=== –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π Tula Spec ===")
        functions_results = {}
        
        try:
            response = requests.get(f"{self.base_urls['tula_spec']}/functions")
            if response.status_code == 200:
                functions = response.json()
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(functions)} —Ñ—É–Ω–∫—Ü–∏–π")
                functions_results["load_success"] = True
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–∞—Ä–±–µ—Ä—à–æ–ø–∞
                required_functions = ["slot_validator", "booking_widget", "notify_system"]
                for func_name in required_functions:
                    func_found = any(f["id"] == func_name for f in functions)
                    if func_found:
                        print(f"‚úÖ –§—É–Ω–∫—Ü–∏—è {func_name} –¥–æ—Å—Ç—É–ø–Ω–∞")
                        functions_results[f"function_{func_name}"] = True
                    else:
                        print(f"‚ùå –§—É–Ω–∫—Ü–∏—è {func_name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                        functions_results[f"function_{func_name}"] = False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–π
                for func in functions:
                    if func["id"] in required_functions:
                        if "description" in func and "input_schema" in func:
                            print(f"‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ {func['id']} –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
                            functions_results[f"metadata_{func['id']}"] = True
                        else:
                            print(f"‚ùå –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ {func['id']} –Ω–µ–ø–æ–ª–Ω—ã–µ")
                            functions_results[f"metadata_{func['id']}"] = False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π: {response.status_code}")
                functions_results["load_success"] = False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π: {e}")
            functions_results["error"] = str(e)
        
        self.results["tula_spec_functions"] = functions_results
        return functions_results
    
    def test_shablon_spec_templates(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç —à–∞–±–ª–æ–Ω–æ–≤ Shablon Spec"""
        print("\n=== –¢–µ—Å—Ç —à–∞–±–ª–æ–Ω–æ–≤ Shablon Spec ===")
        templates_results = {}
        
        try:
            response = requests.get(f"{self.base_urls['shablon_spec']}/templates")
            if response.status_code == 200:
                templates = response.json()
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(templates)} —à–∞–±–ª–æ–Ω–æ–≤")
                templates_results["load_success"] = True
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —à–∞–±–ª–æ–Ω–∞ –±–∞—Ä–±–µ—Ä—à–æ–ø–∞
                barbershop_template = None
                for template in templates:
                    if template.get("id") == "barbershop_basic":
                        barbershop_template = template
                        break
                
                if barbershop_template:
                    print("‚úÖ –®–∞–±–ª–æ–Ω –±–∞—Ä–±–µ—Ä—à–æ–ø–∞ –Ω–∞–π–¥–µ–Ω")
                    templates_results["barbershop_template"] = True
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —à–∞–±–ª–æ–Ω–∞
                    required_fields = ["name", "description", "config_schema"]
                    for field in required_fields:
                        if field in barbershop_template:
                            print(f"‚úÖ –ü–æ–ª–µ {field} –≤ —à–∞–±–ª–æ–Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                            templates_results[f"template_field_{field}"] = True
                        else:
                            print(f"‚ùå –ü–æ–ª–µ {field} –≤ —à–∞–±–ª–æ–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                            templates_results[f"template_field_{field}"] = False
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ files –æ—Ç–¥–µ–ª—å–Ω–æ (—ç—Ç–æ –º–∞—Å—Å–∏–≤)
                    if "files" in barbershop_template:
                        files = barbershop_template["files"]
                        if isinstance(files, list) and len(files) > 0:
                            print(f"‚úÖ –ü–æ–ª–µ files –≤ —à–∞–±–ª–æ–Ω–µ –Ω–∞–π–¥–µ–Ω–æ (—Ñ–∞–π–ª–æ–≤: {len(files)})")
                            templates_results["template_field_files"] = True
                        else:
                            print("‚ùå –ü–æ–ª–µ files –≤ —à–∞–±–ª–æ–Ω–µ –ø—É—Å—Ç–æ–µ")
                            templates_results["template_field_files"] = False
                    else:
                        print("‚ùå –ü–æ–ª–µ files –≤ —à–∞–±–ª–æ–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        templates_results["template_field_files"] = False
                else:
                    print("‚ùå –®–∞–±–ª–æ–Ω –±–∞—Ä–±–µ—Ä—à–æ–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    templates_results["barbershop_template"] = False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤: {response.status_code}")
                templates_results["load_success"] = False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤: {e}")
            templates_results["error"] = str(e)
        
        self.results["shablon_spec_templates"] = templates_results
        return templates_results
    
    def test_product_creation(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —á–µ—Ä–µ–∑ saas_provisioner"""
        print("\n=== –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –±–∞—Ä–±–µ—Ä—à–æ–ø–∞ ===")
        creation_results = {}
        
        try:
            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ–¥—É–∫—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
            if Path(self.product_path).exists():
                import shutil
                shutil.rmtree(self.product_path)
                print("üóëÔ∏è –£–¥–∞–ª–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ–¥—É–∫—Ç")
            
            # –°–æ–∑–¥–∞–µ–º Intent-DSL –¥–ª—è –±–∞—Ä–±–µ—Ä—à–æ–ø–∞
            intent_dsl = """
            name: barbershop_test
            description: –¢–µ—Å—Ç–æ–≤—ã–π –±–∞—Ä–±–µ—Ä—à–æ–ø –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JALM Full Stack
            
            variables:
              shop_name: "–¢–µ—Å—Ç–æ–≤—ã–π –ë–∞—Ä–±–µ—Ä—à–æ–ø"
              telegram_bot_token: "test_token_123"
              admin_phone: "+79001234567"
            
            functions:
              - slot_validator
              - booking_widget  
              - notify_system
            
            templates:
              - barbershop_basic
            
            config:
              port: 3000
              database: sqlite
              notifications: telegram
            """
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º Intent-DSL
            intent_file = f"{self.product_name}.intent"
            with open(intent_file, 'w', encoding='utf-8') as f:
                f.write(intent_dsl)
            
            print("‚úÖ Intent-DSL —Å–æ–∑–¥–∞–Ω")
            creation_results["intent_dsl_created"] = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º saas_provisioner
            print("üöÄ –ó–∞–ø—É—Å–∫ saas_provisioner...")
            result = subprocess.run([
                sys.executable, "saas_provisioner.py", 
                "--intent", intent_file,
                "--output", self.product_path
            ], capture_output=True, text=True, timeout=60)
            
            if result.returncode == 0:
                print("‚úÖ –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                creation_results["product_created"] = True
                print(result.stdout)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {result.stderr}")
                creation_results["product_created"] = False
                creation_results["error"] = result.stderr
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            Path(intent_file).unlink(missing_ok=True)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
            creation_results["error"] = str(e)
        
        self.results["product_creation"] = creation_results
        return creation_results
    
    def test_product_structure(self) -> Dict[str, bool]:
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        print("\n=== –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–¥—É–∫—Ç–∞ ===")
        structure_results = {}
        
        if not Path(self.product_path).exists():
            print("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω")
            structure_results["product_exists"] = False
            self.results["product_structure"] = structure_results
            return structure_results
        
        print("‚úÖ –ü—Ä–æ–¥—É–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        structure_results["product_exists"] = True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã Node.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        required_files = [
            "Dockerfile",
            "docker-compose.yml", 
            "package.json",
            "package-lock.json",
            "README.md",
            "app.py"
        ]
        
        for file_name in required_files:
            file_path = Path(self.product_path) / file_name
            if file_path.exists():
                print(f"‚úÖ {file_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                structure_results[f"file_{file_name}"] = True
            else:
                print(f"‚ùå {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                structure_results[f"file_{file_name}"] = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–∞–ª–æ–≥–æ–≤
        required_dirs = ["config", "dist", "FILES", "app"]
        for dir_name in required_dirs:
            dir_path = Path(self.product_path) / dir_name
            if dir_path.exists() and dir_path.is_dir():
                print(f"‚úÖ –ö–∞—Ç–∞–ª–æ–≥ {dir_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                structure_results[f"dir_{dir_name}"] = True
            else:
                print(f"‚ùå –ö–∞—Ç–∞–ª–æ–≥ {dir_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                structure_results[f"dir_{dir_name}"] = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º provision.yaml –≤ config/
        provision_path = Path(self.product_path) / "config" / "provision.yaml"
        if provision_path.exists():
            print("‚úÖ provision.yaml –≤ config/ –Ω–∞–π–¥–µ–Ω")
            structure_results["file_provision_yaml"] = True
        else:
            print("‚ùå provision.yaml –≤ config/ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            structure_results["file_provision_yaml"] = False
        
        self.results["product_structure"] = structure_results
        return structure_results
    
    def test_provision_yaml(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç provision.yaml"""
        print("\n=== –¢–µ—Å—Ç provision.yaml ===")
        provision_results = {}
        
        provision_file = Path(self.product_path) / "config" / "provision.yaml"
        if not provision_file.exists():
            print("‚ùå provision.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω")
            provision_results["file_exists"] = False
            self.results["provision_yaml"] = provision_results
            return provision_results
        
        print("‚úÖ provision.yaml –Ω–∞–π–¥–µ–Ω")
        provision_results["file_exists"] = True
        
        try:
            with open(provision_file, 'r', encoding='utf-8') as f:
                provision = yaml.safe_load(f)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
            required_sections = ["app_id", "env", "dependencies", "meta"]
            for section in required_sections:
                if section in provision:
                    print(f"‚úÖ –°–µ–∫—Ü–∏—è {section} –Ω–∞–π–¥–µ–Ω–∞")
                    provision_results[f"section_{section}"] = True
                else:
                    print(f"‚ùå –°–µ–∫—Ü–∏—è {section} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    provision_results[f"section_{section}"] = False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º app_id
            if "app_id" in provision:
                app_id = provision["app_id"]
                print(f"‚úÖ App ID: {app_id}")
                provision_results["app_id"] = app_id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º environment
            if "env" in provision:
                env = provision["env"]
                print(f"‚úÖ Environment: {env}")
                provision_results["environment"] = env
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            if "dependencies" in provision:
                deps = provision["dependencies"]
                print(f"‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {list(deps.keys())}")
                provision_results["dependencies"] = list(deps.keys())
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è provision.yaml: {e}")
            provision_results["error"] = str(e)
        
        self.results["provision_yaml"] = provision_results
        return provision_results
    
    def test_docker_configuration(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("\n=== –¢–µ—Å—Ç Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===")
        docker_results = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Dockerfile
        dockerfile_path = Path(self.product_path) / "Dockerfile"
        if dockerfile_path.exists():
            print("‚úÖ Dockerfile –Ω–∞–π–¥–µ–Ω")
            docker_results["dockerfile_exists"] = True
            
            try:
                with open(dockerfile_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è Node.js
                checks = [
                    ("FROM node", "–ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑ Node.js"),
                    ("COPY package.json", "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ package.json"),
                    ("RUN npm", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π npm"),
                    ("COPY dist", "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ dist"),
                    ("EXPOSE", "–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ—Ä—Ç–∞"),
                    ("CMD", "–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞")
                ]
                
                for check, description in checks:
                    if check in content:
                        print(f"‚úÖ {description} –Ω–∞–π–¥–µ–Ω–æ")
                        docker_results[f"dockerfile_{check.lower().replace(' ', '_')}"] = True
                    else:
                        print(f"‚ùå {description} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        docker_results[f"dockerfile_{check.lower().replace(' ', '_')}"] = False
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Dockerfile: {e}")
                docker_results["dockerfile_error"] = str(e)
        else:
            print("‚ùå Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω")
            docker_results["dockerfile_exists"] = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º docker-compose.yml
        compose_path = Path(self.product_path) / "docker-compose.yml"
        if compose_path.exists():
            print("‚úÖ docker-compose.yml –Ω–∞–π–¥–µ–Ω")
            docker_results["compose_exists"] = True
            
            try:
                with open(compose_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                checks = [
                    ("version:", "–í–µ—Ä—Å–∏—è compose"),
                    ("services:", "–°–µ–∫—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"),
                    ("ivan:", "–°–µ—Ä–≤–∏—Å ivan"),
                    ("ports:", "–°–µ–∫—Ü–∏—è –ø–æ—Ä—Ç–æ–≤"),
                    ("networks:", "–°–µ–∫—Ü–∏—è —Å–µ—Ç–µ–π")
                ]
                
                for check, description in checks:
                    if check in content:
                        print(f"‚úÖ {description} –Ω–∞–π–¥–µ–Ω–æ")
                        docker_results[f"compose_{check.lower().replace(':', '').replace('-', '_')}"] = True
                    else:
                        print(f"‚ùå {description} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        docker_results[f"compose_{check.lower().replace(':', '').replace('-', '_')}"] = False
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è docker-compose.yml: {e}")
                docker_results["compose_error"] = str(e)
        else:
            print("‚ùå docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω")
            docker_results["compose_exists"] = False
        
        self.results["docker_configuration"] = docker_results
        return docker_results
    
    def test_product_api(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç API —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        print("\n=== –¢–µ—Å—Ç API –ø—Ä–æ–¥—É–∫—Ç–∞ ===")
        api_results = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º app.py (Python API)
        app_py_path = Path(self.product_path) / "app.py"
        if app_py_path.exists():
            print("‚úÖ app.py –Ω–∞–π–¥–µ–Ω")
            api_results["app_py_exists"] = True
            
            try:
                with open(app_py_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã API
                checks = [
                    ("from fastapi import", "–ò–º–ø–æ—Ä—Ç FastAPI"),
                    ("app = FastAPI", "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"),
                    ("@app.get", "GET —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã"),
                    ("uvicorn.run", "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞")
                ]
                
                for check, description in checks:
                    if check in content:
                        print(f"‚úÖ {description} –Ω–∞–π–¥–µ–Ω–æ")
                        api_results[f"api_{check.lower().replace(' ', '_').replace(':', '')}"] = True
                    else:
                        print(f"‚ùå {description} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        api_results[f"api_{check.lower().replace(' ', '_').replace(':', '')}"] = False
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è app.py: {e}")
                api_results["app_py_error"] = str(e)
        else:
            print("‚ùå app.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
            api_results["app_py_exists"] = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º dist/index.js (Node.js API)
        index_js_path = Path(self.product_path) / "dist" / "index.js"
        if index_js_path.exists():
            print("‚úÖ dist/index.js –Ω–∞–π–¥–µ–Ω")
            api_results["index_js_exists"] = True
        else:
            print("‚ùå dist/index.js –Ω–µ –Ω–∞–π–¥–µ–Ω")
            api_results["index_js_exists"] = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json
        package_json_path = Path(self.product_path) / "package.json"
        if package_json_path.exists():
            print("‚úÖ package.json –Ω–∞–π–¥–µ–Ω")
            api_results["package_json_exists"] = True
            
            try:
                with open(package_json_path, 'r', encoding='utf-8') as f:
                    package = json.load(f)
                
                if "scripts" in package and "start" in package["scripts"]:
                    print("‚úÖ –°–∫—Ä–∏–ø—Ç start –Ω–∞–π–¥–µ–Ω")
                    api_results["start_script"] = True
                else:
                    print("‚ùå –°–∫—Ä–∏–ø—Ç start –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    api_results["start_script"] = False
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json: {e}")
                api_results["package_json_error"] = str(e)
        else:
            print("‚ùå package.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
            api_results["package_json_exists"] = False
        
        self.results["product_api"] = api_results
        return api_results
    
    def run_all_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –±–∞—Ä–±–µ—Ä—à–æ–ø–∞ —Å JALM Full Stack")
        print("=" * 70)
        
        # –¢–µ—Å—Ç—ã JALM —Å–µ—Ä–≤–∏—Å–æ–≤
        self.test_jalm_services_health()
        self.test_tula_spec_functions()
        self.test_shablon_spec_templates()
        
        # –¢–µ—Å—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
        self.test_product_creation()
        self.test_product_structure()
        self.test_provision_yaml()
        self.test_docker_configuration()
        self.test_product_api()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self._print_summary()
        
        return self.results
    
    def _print_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 70)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ë–ê–†–ë–ï–†–®–û–ü–ê –° JALM FULL STACK")
        print("=" * 70)
        
        total_tests = 0
        passed_tests = 0
        
        for test_category, results in self.results.items():
            if isinstance(results, dict):
                category_tests = len([v for v in results.values() if isinstance(v, bool)])
                category_passed = len([v for v in results.values() if v is True])
                total_tests += category_tests
                passed_tests += category_passed
                
                print(f"\n{test_category.replace('_', ' ').title()}:")
                print(f"  –¢–µ—Å—Ç–æ–≤: {category_tests}, –ü—Ä–æ–π–¥–µ–Ω–æ: {category_passed}")
                
                if category_tests > 0:
                    success_rate = (category_passed / category_tests) * 100
                    print(f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        print(f"\nüìà –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"  –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"  –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - passed_tests}")
        
        if total_tests > 0:
            overall_success_rate = (passed_tests / total_tests) * 100
            print(f"  –û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {overall_success_rate:.1f}%")
            
            if overall_success_rate >= 90:
                print("  üéâ –û–¢–õ–ò–ß–ù–û! –ë–∞—Ä–±–µ—Ä—à–æ–ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é —Å JALM Full Stack!")
            elif overall_success_rate >= 70:
                print("  ‚úÖ –•–û–†–û–®–û! –ë–∞—Ä–±–µ—Ä—à–æ–ø —Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏.")
            else:
                print("  ‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø! –ï—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã.")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º yaml –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å provision.yaml
    global yaml
    try:
        import yaml
    except ImportError:
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PyYAML: pip install PyYAML")
        return
    
    tester = BarbershopScenarioTester()
    results = tester.run_all_tests()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    with open("barbershop_test_results.json", "w", encoding="utf-8") as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ barbershop_test_results.json")

if __name__ == "__main__":
    main() 