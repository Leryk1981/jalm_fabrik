#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Context7 Helper —Å JALM Full Stack
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ context7_helper
sys.path.insert(0, str(Path(__file__).parent / "context7_helper"))

def test_context7_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ Context7 Helper"""
    try:
        from context7_helper import Context7APIClient, CodeSearcher, ToolCandidateGenerator, IntegrationManager
        print("‚úÖ –ò–º–ø–æ—Ä—Ç Context7 Helper —É—Å–ø–µ—à–µ–Ω")
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Context7 Helper: {e}")
        return False

def test_context7_cli():
    """–¢–µ—Å—Ç CLI Context7 Helper"""
    try:
        from context7_helper.cli import main
        print("‚úÖ CLI Context7 Helper –¥–æ—Å—Ç—É–ø–µ–Ω")
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ CLI: {e}")
        return False

def test_integration_manager():
    """–¢–µ—Å—Ç IntegrationManager"""
    try:
        from context7_helper import IntegrationManager
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        manager = IntegrationManager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        status = manager.get_status()
        print(f"‚úÖ IntegrationManager —Å–æ–∑–¥–∞–Ω, —Å—Ç–∞—Ç—É—Å: {status['context7_api']}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ IntegrationManager: {e}")
        return False

def test_search_functionality():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞"""
    try:
        from context7_helper import CodeSearcher, SearchQuery
        from context7_helper.client import Context7APIClient
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç (–±–µ–∑ API –∫–ª—é—á–∞ –¥–ª—è —Ç–µ—Å—Ç–∞)
        client = Context7APIClient()
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–∏—Å–∫–æ–≤–∏–∫
        searcher = CodeSearcher(client)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        query = SearchQuery(
            action_name="test_search",
            description="Test search functionality",
            language="python"
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        search_string = searcher.build_search_query(query)
        print(f"‚úÖ –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ—Å—Ç—Ä–æ–µ–Ω: {search_string[:50]}...")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return False

def test_generator_functionality():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
    try:
        from context7_helper import ToolCandidateGenerator
        from context7_helper.client import Context7Result
        from context7_helper.searcher import SearchQuery
        
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        generator = ToolCandidateGenerator(output_dir="test_candidates")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = Context7Result(
            repo="test/repo",
            file_path="test.py",
            function_name="test_function",
            signature="def test_function():",
            example="def test_function():\n    pass",
            score=0.9,
            language="python",
            license="MIT",
            stars=100,
            description="Test function",
            url="https://github.com/test/repo"
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        query = SearchQuery(
            action_name="test_action",
            description="Test action",
            language="python"
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        candidate = generator.create_candidate(result, query)
        print(f"‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç —Å–æ–∑–¥–∞–Ω: {candidate.name}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False

def test_cli_commands():
    """–¢–µ—Å—Ç CLI –∫–æ–º–∞–Ω–¥"""
    try:
        import subprocess
        import sys
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É status
        result = subprocess.run([
            sys.executable, "-m", "context7_helper.cli", "status"
        ], capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            print("‚úÖ CLI –∫–æ–º–∞–Ω–¥–∞ status —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"‚ö†Ô∏è CLI –∫–æ–º–∞–Ω–¥–∞ status –≤–µ—Ä–Ω—É–ª–∞ –∫–æ–¥ {result.returncode}")
            print(f"–í—ã–≤–æ–¥: {result.stdout}")
            print(f"–û—à–∏–±–∫–∏: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ CLI –∫–æ–º–∞–Ω–¥: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Context7 Helper")
    print("=" * 50)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π", test_context7_import),
        ("CLI –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å", test_context7_cli),
        ("IntegrationManager", test_integration_manager),
        ("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞", test_search_functionality),
        ("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞", test_generator_functionality),
        ("CLI –∫–æ–º–∞–Ω–¥—ã", test_cli_commands),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüîç {test_name}...")
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name} - –û–®–ò–ë–ö–ê: {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! Context7 Helper –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é.")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 