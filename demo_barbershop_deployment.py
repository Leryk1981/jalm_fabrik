#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –±–∞—Ä–±–µ—Ä—à–æ–ø–∞
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ—Ç JALM Full Stack –¥–æ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å provision.yaml –∏ SaasProvisioner
"""

import json
import requests
import time
import subprocess
import os
import yaml
from pathlib import Path
from typing import Dict, Any, Optional

class BarbershopDeploymentDemo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –±–∞—Ä–±–µ—Ä—à–æ–ø–∞ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é JALM –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É"""
    
    def __init__(self):
        self.tenant_id = "demo_barbershop_001"
        self.deployment_data = {}
        self.product_name = "barbershop_classic"
        self.instances_dir = "instances"
        
    def step_1_create_jalm_config(self) -> bool:
        """–®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ JALM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –±–∞—Ä–±–µ—Ä—à–æ–ø–∞"""
        print("üîß –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ JALM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        print("-" * 50)
        
        try:
            # –°–æ–∑–¥–∞–µ–º JALM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            jalm_config = {
                "app": {
                    "name": "–ë–∞—Ä–±–µ—Ä—à–æ–ø '–ö–ª–∞—Å—Å–∏–∫–∞'",
                    "type": "booking_system",
                    "version": "1.0.0"
                },
                "features": {
                    "booking_widget": True,
                    "telegram_notifications": True,
                    "admin_panel": True,
                    "slot_validation": True,
                    "payment_integration": False
                },
                "integrations": {
                    "telegram_bot": {
                        "enabled": True,
                        "config": {
                            "token": "{{TELEGRAM_BOT_TOKEN}}",
                            "admin_chat_id": "{{ADMIN_CHAT_ID}}"
                        }
                    },
                    "database": {
                        "type": "postgresql",
                        "version": "15"
                    },
                    "redis": {
                        "enabled": True,
                        "purpose": "session_storage"
                    }
                },
                "ui": {
                    "theme": "classic",
                    "language": "ru",
                    "responsive": True
                },
                "business_logic": {
                    "slot_duration": 60,
                    "advance_booking_days": 14,
                    "working_hours": {
                        "monday": {"start": "09:00", "end": "20:00"},
                        "tuesday": {"start": "09:00", "end": "20:00"},
                        "wednesday": {"start": "09:00", "end": "20:00"},
                        "thursday": {"start": "09:00", "end": "20:00"},
                        "friday": {"start": "09:00", "end": "20:00"},
                        "saturday": {"start": "10:00", "end": "18:00"},
                        "sunday": {"start": "10:00", "end": "16:00"}
                    },
                    "services": [
                        {"id": "haircut", "name": "–°—Ç—Ä–∏–∂–∫–∞", "price": 1500, "duration": 60},
                        {"id": "beard", "name": "–°—Ç—Ä–∏–∂–∫–∞ –±–æ—Ä–æ–¥—ã", "price": 800, "duration": 30},
                        {"id": "combo", "name": "–°—Ç—Ä–∏–∂–∫–∞ + –±–æ—Ä–æ–¥–∞", "price": 2000, "duration": 90},
                        {"id": "kids", "name": "–î–µ—Ç—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞", "price": 1000, "duration": 45}
                    ]
                }
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º JALM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            jalm_path = Path("barbershop.jalm.yaml")
            with open(jalm_path, 'w', encoding='utf-8') as f:
                yaml.dump(jalm_config, f, default_flow_style=False, allow_unicode=True, sort_keys=False)
            
            print(f"‚úÖ JALM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {jalm_path}")
            print(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {jalm_config['app']['name']}")
            print(f"‚úÖ –¢–∏–ø: {jalm_config['app']['type']}")
            print(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π: {len(jalm_config['integrations'])}")
            
            self.deployment_data["jalm_config"] = jalm_config
            self.deployment_data["jalm_path"] = str(jalm_path)
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è JALM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def step_2_provision_product(self) -> bool:
        """–®–∞–≥ 2: –ü—Ä–æ–≤–∏–∂–∏–Ω–∏–Ω–≥ –ø—Ä–æ–¥—É–∫—Ç–∞ —á–µ—Ä–µ–∑ SaasProvisioner"""
        print("\nüöÄ –®–∞–≥ 2: –ü—Ä–æ–≤–∏–∂–∏–Ω–∏–Ω–≥ –ø—Ä–æ–¥—É–∫—Ç–∞")
        print("-" * 50)
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SaasProvisioner
            from saas_provisioner import SaasProvisioner
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä provisioner
            provisioner = SaasProvisioner()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ JALM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            jalm_path = self.deployment_data.get("jalm_path")
            if not jalm_path or not Path(jalm_path).exists():
                print("‚ùå JALM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            # –ü—Ä–æ–≤–∏–∂–∏–Ω–∏–º –ø—Ä–æ–¥—É–∫—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º —Å–µ—Ä–≤–∏—Å–æ–≤
            print("üîÑ –ü—Ä–æ–≤–∏–∂–∏–Ω–∏–Ω–≥ –ø—Ä–æ–¥—É–∫—Ç–∞...")
            print("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π...")
            
            # –°–æ–∑–¥–∞–µ–º provision.yaml —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º —Å–µ—Ä–≤–∏—Å–æ–≤
            print("–®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è provision.yaml...")
            provision_path = provisioner._create_basic_provision_yaml(jalm_path)
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π provision.yaml
            with open(provision_path, 'r', encoding='utf-8') as f:
                provision = yaml.safe_load(f)
            
            print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω provision.yaml: {provision_path}")
            print(f"‚úÖ Provision.yaml —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
            print(f"   - App ID: {provision.get('app_id', 'N/A')}")
            print(f"   - Environment: {provision.get('env', 'N/A')}")
            print(f"   - Tula Spec services: {len(provision.get('dependencies', {}).get('tula_spec', []))}")
            print(f"   - API Layer services: {len(provision.get('dependencies', {}).get('api_layer', []))}")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞
            product_name = "demo"
            instance_dir = Path(self.instances_dir) / product_name
            instance_dir.mkdir(parents=True, exist_ok=True)
            
            # –ö–æ–ø–∏—Ä—É–µ–º provision.yaml –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞
            import shutil
            shutil.copy2(provision_path, instance_dir / "provision.yaml")
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–¥—É–∫—Ç–∞
            params = {
                'calendars': 1,
                'lang': 'ru',
                'domain': 'demo.mycalendar.app'
            }
            
            print(f"üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞: {product_name}")
            print(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
            
            # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –ø—Ä–æ–¥—É–∫—Ç
            print("üîß –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞...")
            provisioner.create_minimal_client_product(product_name, str(instance_dir), provision)
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –ø–ª–∞–≥–∏–Ω–∞
            provisioner.create_sample_product_files(product_name, str(instance_dir), params, provision)
            
            # –°–æ–∑–¥–∞–µ–º Dockerfile
            provisioner.create_client_dockerfile(product_name, str(instance_dir), provision)
            
            # –°–æ–∑–¥–∞–µ–º docker-compose.yml
            provisioner.create_production_docker_compose(product_name, str(instance_dir), provision)
            
            # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª
            provisioner.create_env_file(str(instance_dir), provision)
            
            instance_dir = str(instance_dir)
            
            if not instance_dir or not Path(instance_dir).exists():
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–∏–∂–∏–Ω–∏–Ω–≥–∞")
                return False
            
            print(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç –ø—Ä–æ–≤–∏–∂–∏–Ω–µ–Ω: {instance_dir}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            instance_path = Path(instance_dir)
            created_files = list(instance_path.rglob("*"))
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(created_files)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã
            key_files = [
                "Dockerfile",
                "docker-compose.yml", 
                "provision.yaml",
                ".env",
                "app.py"
            ]
            
            for file_name in key_files:
                file_path = instance_path / file_name
                if file_path.exists():
                    print(f"‚úÖ {file_name}: –Ω–∞–π–¥–µ–Ω")
                else:
                    print(f"‚ö†Ô∏è  {file_name}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            self.deployment_data["instance_dir"] = instance_dir
            self.deployment_data["provision_successful"] = True
            return True
            
        except ImportError:
            print("‚ùå SaasProvisioner –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–∏–∂–∏–Ω–∏–Ω–≥–∞: {e}")
            return False
    
    def step_3_validate_provision(self) -> bool:
        """–®–∞–≥ 3: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–≤–∏–∂–∏–Ω–∏–Ω–≥–∞"""
        print("\nüîç –®–∞–≥ 3: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–≤–∏–∂–∏–Ω–∏–Ω–≥–∞")
        print("-" * 50)
        
        try:
            instance_dir = self.deployment_data.get("instance_dir")
            if not instance_dir:
                print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            instance_path = Path(instance_dir)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º provision.yaml
            provision_path = instance_path / "provision.yaml"
            if not provision_path.exists():
                print("‚ùå provision.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            with open(provision_path, 'r', encoding='utf-8') as f:
                provision = yaml.safe_load(f)
            
            print(f"‚úÖ App ID: {provision.get('app_id', 'N/A')}")
            print(f"‚úÖ Environment: {provision.get('env', 'N/A')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            dependencies = provision.get('dependencies', {})
            print(f"‚úÖ Datastore: {dependencies.get('datastore', {}).get('type', 'N/A')}")
            print(f"‚úÖ API Layer: {len(dependencies.get('api_layer', []))} —Å–µ—Ä–≤–∏—Å–æ–≤")
            print(f"‚úÖ Tula Spec: {len(dependencies.get('tula_spec', []))} —Ñ—É–Ω–∫—Ü–∏–π")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Dockerfile
            dockerfile_path = instance_path / "Dockerfile"
            if dockerfile_path.exists():
                with open(dockerfile_path, 'r', encoding='utf-8') as f:
                    dockerfile_content = f.read()
                
                if "FROM python:3.11-slim" in dockerfile_content:
                    print("‚úÖ Dockerfile: Python 3.11")
                elif "FROM node:20-alpine" in dockerfile_content:
                    print("‚úÖ Dockerfile: Node.js 20")
                else:
                    print("‚ö†Ô∏è  Dockerfile: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑")
            else:
                print("‚ùå Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º docker-compose.yml
            compose_path = instance_path / "docker-compose.yml"
            if compose_path.exists():
                with open(compose_path, 'r', encoding='utf-8') as f:
                    compose = yaml.safe_load(f)
                
                services = compose.get('services', {})
                print(f"‚úÖ Docker Compose: {len(services)} —Å–µ—Ä–≤–∏—Å–æ–≤")
                
                for service_name in services:
                    print(f"  - {service_name}")
            else:
                print("‚ùå docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            self.deployment_data["provision_valid"] = True
            self.deployment_data["provision_config"] = provision
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return False
    
    def step_4_build_and_deploy(self) -> bool:
        """–®–∞–≥ 4: –°–±–æ—Ä–∫–∞ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"""
        print("\nüê≥ –®–∞–≥ 4: –°–±–æ—Ä–∫–∞ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ")
        print("-" * 50)
        
        try:
            instance_dir = self.deployment_data.get("instance_dir")
            if not instance_dir:
                print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            instance_path = Path(instance_dir)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Docker
            try:
                subprocess.run(["docker", "--version"], check=True, capture_output=True)
            except (subprocess.CalledProcessError, FileNotFoundError):
                print("‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
            
            # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑
            print("üîÑ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞...")
            image_name = f"{self.product_name}:latest"
            
            subprocess.run(
                ["docker", "build", "-t", image_name, "."],
                cwd=instance_path,
                check=True
            )
            print(f"‚úÖ –û–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω: {image_name}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ docker-compose
            compose_path = instance_path / "docker-compose.yml"
            if not compose_path.exists():
                print("‚ùå docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            print("üîÑ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...")
            subprocess.run(
                ["docker-compose", "up", "-d"],
                cwd=instance_path,
                check=True
            )
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
            time.sleep(15)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            result = subprocess.run(
                ["docker-compose", "ps"],
                cwd=instance_path,
                capture_output=True,
                text=True,
                check=True
            )
            
            print("üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:")
            print(result.stdout)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º health check
            print("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤...")
            
            # –ß–∏—Ç–∞–µ–º provision.yaml –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤
            provision_path = instance_path / "provision.yaml"
            with open(provision_path, 'r', encoding='utf-8') as f:
                provision = yaml.safe_load(f)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—Ç—ã –∏–∑ provision
            net_config = provision.get('net', {})
            domain = net_config.get('domain', 'localhost')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å
            try:
                response = requests.get(f"http://localhost:8080/health", timeout=10)
                if response.status_code == 200:
                    print("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å: –∑–¥–æ—Ä–æ–≤")
                else:
                    print(f"‚ö†Ô∏è  –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å: HTTP {response.status_code}")
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å: {e}")
            
            self.deployment_data["deployment_successful"] = True
            self.deployment_data["docker_image"] = image_name
            return True
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Docker: {e}")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {e}")
            return False
    
    def step_5_generate_client_instructions(self) -> bool:
        """–®–∞–≥ 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
        print("\nüìã –®–∞–≥ 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞")
        print("-" * 50)
        
        try:
            instance_dir = self.deployment_data.get("instance_dir")
            if not instance_dir:
                print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            instance_path = Path(instance_dir)
            
            # –ß–∏—Ç–∞–µ–º provision.yaml
            provision_path = instance_path / "provision.yaml"
            with open(provision_path, 'r', encoding='utf-8') as f:
                provision = yaml.safe_load(f)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            app_id = provision.get('app_id', 'barbershop')
            net_config = provision.get('net', {})
            domain = net_config.get('domain', 'localhost')
            
            instructions = f"""
üéØ –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –ö–õ–ò–ï–ù–¢–ê - –ë–ê–†–ë–ï–†–®–û–ü '–ö–õ–ê–°–°–ò–ö–ê'

## üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
- –¢–∏–ø: –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç (–±–µ–∑ JALM –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Docker –æ–±—Ä–∞–∑
- –ü—Ä–æ–≤–∏–∂–∏–Ω–∏–Ω–≥: –ß–µ—Ä–µ–∑ provision.yaml

## üåê –î–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å–∞–º

### –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
- URL: http://localhost:8080
- –û–ø–∏—Å–∞–Ω–∏–µ: –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
- –°—Ç–∞—Ç—É—Å: –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç

## üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞

### –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
–§–∞–π–ª .env —É–∂–µ —Å–æ–∑–¥–∞–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞:

```env
# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
PRODUCT_NAME=–ë–∞—Ä–±–µ—Ä—à–æ–ø '–ö–ª–∞—Å—Å–∏–∫–∞'
NODE_ENV=production

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
DATABASE_URL=postgresql://user:password@localhost:5432/barbershop

# Redis (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
REDIS_URL=redis://localhost:6379

# Telegram Bot (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
TELEGRAM_BOT_TOKEN=your_bot_token_here
ADMIN_CHAT_ID=your_chat_id_here
```

### –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {instance_dir}
2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å: `docker-compose restart`
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: http://localhost:8080

## üì± –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ

### –î–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8080
2. –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏ –≤—Ä–µ–º—è
3. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ

### –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8080/admin
2. –í–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
3. –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–∞–ø–∏—Å—è–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏

## üê≥ Docker –∫–æ–º–∞–Ω–¥—ã

### –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏
```bash
# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞
cd {instance_dir}

# –ó–∞–ø—É—Å–∫
docker-compose up -d

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞
docker-compose down

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫
docker-compose restart

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
docker-compose logs -f

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
docker-compose pull
docker-compose up -d
```

### –û—Ç–¥–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
```bash
# –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞
docker-compose build --no-cache

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞
docker-compose ps

# –û—á–∏—Å—Ç–∫–∞
docker-compose down -v
docker system prune -a
```

## üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

### –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
- –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å: http://localhost:8080/health

### –õ–æ–≥–∏
```bash
# –í—Å–µ –ª–æ–≥–∏
docker-compose logs

# –õ–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
docker-compose logs -f

# –õ–æ–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
docker-compose logs {app_id}
```

## üÜò –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–ø–æ–ª–∞–¥–æ–∫

### –°–µ—Ä–≤–∏—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: `docker-compose ps`
2. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏: `docker-compose logs`
3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ: `docker-compose restart`

### –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ—Ä—Ç–∞–º–∏
```bash
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤
netstat -tulpn | grep :8080

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
sudo lsof -ti:8080 | xargs kill -9
```

### –ü—Ä–æ–±–ª–µ–º—ã —Å Docker
```bash
# –û—á–∏—Å—Ç–∫–∞
docker system prune -a

# –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞
docker-compose build --no-cache
docker-compose up -d
```

## üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
```
{instance_dir}/
‚îú‚îÄ‚îÄ Dockerfile          # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑ –ø—Ä–æ–¥—É–∫—Ç–∞
‚îú‚îÄ‚îÄ docker-compose.yml  # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
‚îú‚îÄ‚îÄ provision.yaml      # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∏–∂–∏–Ω–∏–Ω–≥–∞
‚îú‚îÄ‚îÄ .env               # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
‚îú‚îÄ‚îÄ app.py             # –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚îú‚îÄ‚îÄ requirements.txt   # Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
‚îî‚îÄ‚îÄ nginx.conf         # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
```

## üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–µ—Ä–≤–∏—Å: `docker-compose down`
2. –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
3. –ü–µ—Ä–µ—Å–æ–±–µ—Ä–∏—Ç–µ –æ–±—Ä–∞–∑: `docker-compose build --no-cache`
4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: `docker-compose up -d`

---
üéâ –í–∞—à –±–∞—Ä–±–µ—Ä—à–æ–ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!
"""
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            instructions_path = Path("client_instructions.txt")
            with open(instructions_path, 'w', encoding='utf-8') as f:
                f.write(instructions)
            
            print(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã: {instructions_path}")
            
            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–ø—Ä–∞–≤–∫—É
            quick_guide = f"""
üöÄ –ë–´–°–¢–†–´–ô –°–¢–ê–†–¢ - –ë–ê–†–ë–ï–†–®–û–ü '–ö–õ–ê–°–°–ò–ö–ê'

‚úÖ –°–ï–†–í–ò–° –ó–ê–ü–£–©–ï–ù:
- –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: http://localhost:8080
- –¢–∏–ø: –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç

üîß –ù–ê–°–¢–†–û–ô–ö–ê:
1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env –≤ {instance_dir}
2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose restart

üì± –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
- –ö–ª–∏–µ–Ω—Ç—ã: http://localhost:8080
- –ê–¥–º–∏–Ω: http://localhost:8080/admin

üê≥ –£–ü–†–ê–í–õ–ï–ù–ò–ï:
- –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {instance_dir}
- –ó–∞–ø—É—Å–∫: docker-compose up -d
- –û—Å—Ç–∞–Ω–æ–≤–∫–∞: docker-compose down
- –õ–æ–≥–∏: docker-compose logs -f

üìñ –ü–û–î–†–û–ë–ù–ê–Ø –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø: client_instructions.txt
"""
            
            quick_guide_path = Path("quick_start.txt")
            with open(quick_guide_path, 'w', encoding='utf-8') as f:
                f.write(quick_guide)
            
            print(f"‚úÖ –ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {quick_guide_path}")
            
            self.deployment_data["instructions_generated"] = True
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {e}")
            return False
    
    def run_demo(self):
        """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Ø –ë–ê–†–ë–ï–†–®–û–ü–ê")
        print("=" * 60)
        print("üèóÔ∏è  –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: JALM Full Stack + SaasProvisioner")
        print("=" * 60)
        
        steps = [
            ("–°–æ–∑–¥–∞–Ω–∏–µ JALM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", self.step_1_create_jalm_config),
            ("–ü—Ä–æ–≤–∏–∂–∏–Ω–∏–Ω–≥ –ø—Ä–æ–¥—É–∫—Ç–∞", self.step_2_provision_product),
            ("–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–≤–∏–∂–∏–Ω–∏–Ω–≥–∞", self.step_3_validate_provision),
            ("–°–±–æ—Ä–∫–∞ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ", self.step_4_build_and_deploy),
            ("–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π", self.step_5_generate_client_instructions)
        ]
        
        successful_steps = 0
        total_steps = len(steps)
        
        for step_name, step_func in steps:
            if step_func():
                successful_steps += 1
            else:
                print(f"‚ùå –®–∞–≥ '{step_name}' –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                break  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò")
        print("=" * 60)
        
        success_rate = (successful_steps / total_steps) * 100
        print(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —à–∞–≥–æ–≤: {successful_steps}/{total_steps}")
        print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        if success_rate == 100:
            print("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print("üöÄ –ë–∞—Ä–±–µ—Ä—à–æ–ø —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –∫–∞–∫ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç!")
            print("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
            print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env")
            print("2. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8080 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            print("3. –ò–∑—É—á–∏—Ç–µ client_instructions.txt –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
            
            instance_dir = self.deployment_data.get("instance_dir")
            if instance_dir:
                print(f"4. –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {instance_dir}")
        else:
            print("‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è")
            print("üìñ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        with open("deployment_results.json", 'w', encoding='utf-8') as f:
            json.dump(self.deployment_data, f, indent=2, ensure_ascii=False)
        
        print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ deployment_results.json")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    demo = BarbershopDeploymentDemo()
    demo.run_demo()

if __name__ == "__main__":
    main() 