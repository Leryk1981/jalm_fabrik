#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –±–∞—Ä–±–µ—Ä—à–æ–ø–∞
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ—Ç JALM-–æ–±—ä–µ–∫—Ç–∞ –¥–æ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –±–æ—Ç–∞
"""

import json
import csv
import zipfile
from pathlib import Path
from typing import Dict, Any

class BarbershopDeploymentDemo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –±–∞—Ä–±–µ—Ä—à–æ–ø–∞"""
    
    def __init__(self):
        self.tenant_id = "demo_barbershop_001"
        self.deployment_data = {}
    
    def step_1_validate_jalm_object(self) -> bool:
        """–®–∞–≥ 1: –í–∞–ª–∏–¥–∞—Ü–∏—è JALM –æ–±—ä–µ–∫—Ç–∞"""
        print("üîç –®–∞–≥ 1: –í–∞–ª–∏–¥–∞—Ü–∏—è JALM –æ–±—ä–µ–∫—Ç–∞")
        print("-" * 40)
        
        try:
            with open("barbershop_plugin/OBJECT.jalm", 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            checks = [
                ("name:", "–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞"),
                ("communication:", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏"),
                ("llm:", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ LLM"),
                ("variables:", "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"),
                ("requires:", "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"),
                ("generate:", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è")
            ]
            
            all_valid = True
            for check, description in checks:
                if check in content:
                    print(f"‚úÖ {description}")
                else:
                    print(f"‚ùå {description}")
                    all_valid = False
            
            self.deployment_data["jalm_valid"] = all_valid
            return all_valid
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return False
    
    def step_2_process_files(self) -> bool:
        """–®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤"""
        print("\nüìÅ –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤")
        print("-" * 40)
        
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ plugin.js
            with open("barbershop_plugin/FILES/plugin.js", 'r', encoding='utf-8') as f:
                plugin_content = f.read()
            
            # –ó–∞–º–µ–Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
            replacements = {
                "{{STAFF_LIST_JSON}}": self._get_staff_json(),
                "{{BOTNAME}}": f"{self.tenant_id}_bot",
                "{{SHOP_NAME}}": "–ë–∞—Ä–±–µ—Ä—à–æ–ø '–ö–ª–∞—Å—Å–∏–∫–∞'",
                "{{PRIMARY_COLOR}}": "#2C3E50"
            }
            
            for placeholder, value in replacements.items():
                plugin_content = plugin_content.replace(placeholder, str(value))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
            processed_dir = Path("processed_plugin")
            processed_dir.mkdir(exist_ok=True)
            
            with open(processed_dir / "plugin.js", 'w', encoding='utf-8') as f:
                f.write(plugin_content)
            
            print("‚úÖ plugin.js –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ LLM –¥–µ–π—Å—Ç–≤–∏–π
            with open("barbershop_plugin/FILES/llm_actions.json", 'r', encoding='utf-8') as f:
                actions = json.load(f)
            
            # –ó–∞–º–µ–Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –≤ API URLs
            for action in actions:
                if "api" in action:
                    action["api"] = action["api"].replace("{{TENANT_ID}}", self.tenant_id)
            
            with open(processed_dir / "llm_actions.json", 'w', encoding='utf-8') as f:
                json.dump(actions, f, indent=2, ensure_ascii=False)
            
            print("‚úÖ llm_actions.json –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ CSV
            with open("barbershop_plugin/FILES/migrations.csv", 'r', encoding='utf-8') as f:
                reader = csv.DictReader(f)
                staff_data = list(reader)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ Firebase –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            firebase_data = {
                "employees": staff_data,
                "slots": self._generate_slots(staff_data),
                "settings": {
                    "tenant_id": self.tenant_id,
                    "shop_name": "–ë–∞—Ä–±–µ—Ä—à–æ–ø '–ö–ª–∞—Å—Å–∏–∫–∞'",
                    "slot_duration": 60,
                    "advance_booking_days": 14
                }
            }
            
            with open(processed_dir / "firebase_data.json", 'w', encoding='utf-8') as f:
                json.dump(firebase_data, f, indent=2, ensure_ascii=False)
            
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è Firebase –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã")
            
            self.deployment_data["files_processed"] = True
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")
            return False
    
    def step_3_create_telegram_bot(self) -> bool:
        """–®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ Telegram –±–æ—Ç–∞"""
        print("\nü§ñ –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ Telegram –±–æ—Ç–∞")
        print("-" * 40)
        
        try:
            bot_config = {
                "bot_name": f"{self.tenant_id}_bot",
                "username": f"{self.tenant_id}_barbershop_bot",
                "description": "–ë–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫ –±–∞—Ä–±–µ—Ä—É",
                "commands": [
                    {"command": "start", "description": "–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å"},
                    {"command": "book", "description": "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –±–∞—Ä–±–µ—Ä—É"},
                    {"command": "schedule", "description": "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"},
                    {"command": "barbers", "description": "–°–ø–∏—Å–æ–∫ –±–∞—Ä–±–µ—Ä–æ–≤"},
                    {"command": "cancel", "description": "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"}
                ],
                "webhook_url": f"https://webhooks.jalm.io/tenant/{self.tenant_id}/chat"
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞
            processed_dir = Path("processed_plugin")
            with open(processed_dir / "telegram_bot.json", 'w', encoding='utf-8') as f:
                json.dump(bot_config, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ Telegram –±–æ—Ç —Å–æ–∑–¥–∞–Ω: @{bot_config['username']}")
            print(f"‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {bot_config['webhook_url']}")
            
            self.deployment_data["telegram_bot_created"] = True
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
            return False
    
    def step_4_setup_webhook_handler(self) -> bool:
        """–®–∞–≥ 4: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        print("\nüîó –®–∞–≥ 4: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞")
        print("-" * 40)
        
        try:
            webhook_config = {
                "tenant_id": self.tenant_id,
                "channels": {
                    "telegram": {
                        "enabled": True,
                        "token": "{{TELEGRAM_BOT_TOKEN}}",
                        "webhook_url": f"https://webhooks.jalm.io/tenant/{self.tenant_id}/chat"
                    },
                    "messenger": {
                        "enabled": True,
                        "page_token": "{{MESSENGER_PAGE_TOKEN}}",
                        "webhook_url": f"https://webhooks.jalm.io/tenant/{self.tenant_id}/chat"
                    }
                },
                "llm_config": {
                    "model": "gpt-4",
                    "actions_file": "llm_actions.json",
                    "memory": "session"
                }
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é webhook
            processed_dir = Path("processed_plugin")
            with open(processed_dir / "webhook_config.json", 'w', encoding='utf-8') as f:
                json.dump(webhook_config, f, indent=2, ensure_ascii=False)
            
            print("‚úÖ Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            print("‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram –∏ Messenger")
            
            self.deployment_data["webhook_configured"] = True
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")
            return False
    
    def step_5_deploy_lambda(self) -> bool:
        """–®–∞–≥ 5: –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Lambda —Ñ—É–Ω–∫—Ü–∏–∏"""
        print("\n‚ö° –®–∞–≥ 5: –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Lambda —Ñ—É–Ω–∫—Ü–∏–∏")
        print("-" * 40)
        
        try:
            lambda_config = {
                "function_name": f"{self.tenant_id}_chatbot",
                "runtime": "python3.9",
                "memory": "512MB",
                "timeout": 30,
                "environment_variables": {
                    "TENANT_ID": self.tenant_id,
                    "TELEGRAM_BOT_TOKEN": "{{TELEGRAM_BOT_TOKEN}}",
                    "MESSENGER_PAGE_TOKEN": "{{MESSENGER_PAGE_TOKEN}}",
                    "FIREBASE_PROJECT_ID": "{{FIREBASE_PROJECT_ID}}"
                },
                "layers": [
                    "jalm-core-runner",
                    "tula-spec-functions",
                    "shablon-spec-templates"
                ]
            }
            
            # –°–æ–∑–¥–∞–µ–º deployment package
            processed_dir = Path("processed_plugin")
            with open(processed_dir / "lambda_config.json", 'w', encoding='utf-8') as f:
                json.dump(lambda_config, f, indent=2, ensure_ascii=False)
            
            print("‚úÖ Lambda —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            print(f"‚úÖ –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏: {lambda_config['function_name']}")
            print("‚úÖ –°–ª–æ–∏ JALM –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
            
            self.deployment_data["lambda_deployed"] = True
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è Lambda: {e}")
            return False
    
    def step_6_create_deployment_package(self) -> bool:
        """–®–∞–≥ 6: –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        print("\nüì¶ –®–∞–≥ 6: –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è")
        print("-" * 40)
        
        try:
            # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
            zip_path = f"barbershop_deployment_{self.tenant_id}.zip"
            
            with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                processed_dir = Path("processed_plugin")
                for file_path in processed_dir.glob("*"):
                    if file_path.is_file():
                        zipf.write(file_path, file_path.name)
                        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {file_path.name}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
                source_files = [
                    "barbershop_plugin/OBJECT.jalm",
                    "barbershop_plugin/FILES/manifest.json"
                ]
                
                for file_path in source_files:
                    if Path(file_path).exists():
                        zipf.write(file_path, f"source/{Path(file_path).name}")
                        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π: {Path(file_path).name}")
            
            print(f"‚úÖ –ü–∞–∫–µ—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω: {zip_path}")
            
            self.deployment_data["package_created"] = True
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞: {e}")
            return False
    
    def step_7_generate_client_assets(self) -> bool:
        """–®–∞–≥ 7: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
        print("\nüåê –®–∞–≥ 7: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤")
        print("-" * 40)
        
        try:
            # CDN URL –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞
            cdn_url = f"https://cdn.jalm.io/tenant/{self.tenant_id}/plugin.js"
            
            # HTML –∫–æ–¥ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            embed_code = f"""
<!-- –ë–∞—Ä–±–µ—Ä—à–æ–ø –∫–∞–ª–µ–Ω–¥–∞—Ä—å-–±–æ—Ç -->
<script src="{cdn_url}"></script>
<!-- –ö–æ–Ω–µ—Ü –∫–æ–¥–∞ -->
"""
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            with open("client_embed_code.html", 'w', encoding='utf-8') as f:
                f.write(embed_code)
            
            print("‚úÖ –ö–æ–¥ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Å–æ–∑–¥–∞–Ω: client_embed_code.html")
            print(f"‚úÖ CDN URL: {cdn_url}")
            
            # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            instructions = f"""
üéØ –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –ö–õ–ò–ï–ù–¢–ê

1. üì± Telegram –±–æ—Ç: @{self.tenant_id}_barbershop_bot
2. üåê –í–∏–¥–∂–µ—Ç –¥–ª—è —Å–∞–π—Ç–∞: –≤—Å—Ç–∞–≤—å—Ç–µ –∫–æ–¥ –∏–∑ client_embed_code.html
3. üìä –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: https://admin.jalm.io/tenant/{self.tenant_id}

üîß –ù–ê–°–¢–†–û–ô–ö–ê:
- –ó–∞–º–µ–Ω–∏—Ç–µ {{TELEGRAM_BOT_TOKEN}} –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
- –ó–∞–º–µ–Ω–∏—Ç–µ {{MESSENGER_PAGE_TOKEN}} –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã
- –ó–∞–º–µ–Ω–∏—Ç–µ {{FIREBASE_PROJECT_ID}} –Ω–∞ –≤–∞—à –ø—Ä–æ–µ–∫—Ç Firebase

‚úÖ –ì–û–¢–û–í–û –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!
"""
            
            with open("client_instructions.txt", 'w', encoding='utf-8') as f:
                f.write(instructions)
            
            print("‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã: client_instructions.txt")
            
            self.deployment_data["client_assets_generated"] = True
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
            return False
    
    def _get_staff_json(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ JSON –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª–∞"""
        try:
            with open("barbershop_plugin/FILES/migrations.csv", 'r', encoding='utf-8') as f:
                reader = csv.DictReader(f)
                staff = list(reader)
            return json.dumps(staff, ensure_ascii=False)
        except:
            return "[]"
    
    def _generate_slots(self, staff_data: list) -> list:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ—Ç–æ–≤ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞"""
        slots = []
        # –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ—Ç–æ–≤ –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏ –≤–ø–µ—Ä–µ–¥
        return slots
    
    def run_demo(self):
        """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Ø –ë–ê–†–ë–ï–†–®–û–ü–ê")
        print("=" * 60)
        
        steps = [
            ("–í–∞–ª–∏–¥–∞—Ü–∏—è JALM –æ–±—ä–µ–∫—Ç–∞", self.step_1_validate_jalm_object),
            ("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤", self.step_2_process_files),
            ("–°–æ–∑–¥–∞–Ω–∏–µ Telegram –±–æ—Ç–∞", self.step_3_create_telegram_bot),
            ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook", self.step_4_setup_webhook_handler),
            ("–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Lambda", self.step_5_deploy_lambda),
            ("–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞", self.step_6_create_deployment_package),
            ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤", self.step_7_generate_client_assets)
        ]
        
        successful_steps = 0
        total_steps = len(steps)
        
        for step_name, step_func in steps:
            if step_func():
                successful_steps += 1
            else:
                print(f"‚ùå –®–∞–≥ '{step_name}' –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò")
        print("=" * 60)
        
        success_rate = (successful_steps / total_steps) * 100
        print(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —à–∞–≥–æ–≤: {successful_steps}/{total_steps}")
        print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        if success_rate == 100:
            print("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print("üöÄ –ë–∞—Ä–±–µ—Ä—à–æ–ø –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        else:
            print("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        with open("deployment_results.json", 'w', encoding='utf-8') as f:
            json.dump(self.deployment_data, f, indent=2, ensure_ascii=False)
        
        print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ deployment_results.json")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    demo = BarbershopDeploymentDemo()
    demo.run_demo()

if __name__ == "__main__":
    main() 