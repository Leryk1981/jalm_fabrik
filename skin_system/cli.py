#!/usr/bin/env python3
"""
CLI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Skin-As-Code —Å–∏—Å—Ç–µ–º–æ–π
–ö–æ–º–∞–Ω–¥–∞: npm run create-skin -- client=acme color=2f7cff
"""

import argparse
import json
import sys
from pathlib import Path
from typing import Dict, Any

from template_registry import TemplateRegistry
from skin_assembler import SkinAssembler
from skin_store import SkinStore

class SkinCLI:
    def __init__(self):
        self.registry = TemplateRegistry()
        self.assembler = SkinAssembler()
        self.store = SkinStore()
    
    def create_skin(self, args):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∫–∏–Ω–∞
        npm run create-skin -- client=acme color=2f7cff
        """
        print("üé® –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∫–∏–Ω–∞...")
        
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        client_name = args.get('client', 'default')
        color = args.get('color', '2a5298')
        layout = args.get('layout', 'booking_page')
        theme = args.get('theme', 'default')
        
        print(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        print(f"   - –ö–ª–∏–µ–Ω—Ç: {client_name}")
        print(f"   - –¶–≤–µ—Ç: #{color}")
        print(f"   - –ú–∞–∫–µ—Ç: {layout}")
        print(f"   - –¢–µ–º–∞: {theme}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é —Ç–µ–º—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ü–≤–µ—Ç–æ–º
        custom_theme = {
            "description": f"–ö–∞—Å—Ç–æ–º–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è {client_name}",
            "colors": {
                "primary": f"#{color}",
                "secondary": self._adjust_color(color, -20),
                "accent": "#28a745",
                "background": "#f5f5f5",
                "text": "#333333"
            },
            "fonts": {
                "heading": "Inter, sans-serif",
                "body": "Inter, sans-serif"
            }
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—É –≤ —Ä–µ–µ—Å—Ç—Ä
        theme_name = f"{client_name}_theme"
        self.registry.add_widget(theme_name, custom_theme)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∫–∏–Ω–∞
        skin_config = {
            "name": f"{client_name.title()} Skin",
            "description": f"–ö–∞—Å—Ç–æ–º–Ω—ã–π —Å–∫–∏–Ω –¥–ª—è {client_name}",
            "layout": layout,
            "theme": theme_name,
            "version": "1.0.0",
            "author": "Skin CLI",
            "custom_css": f"""
            /* –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è {client_name} */
            .btn {{
                background: #{color} !important;
            }}
            .btn:hover {{
                background: {self._adjust_color(color, -20)} !important;
            }}
            """,
            "custom_js": f"""
            // –ö–∞—Å—Ç–æ–º–Ω—ã–π JavaScript –¥–ª—è {client_name}
            console.log('{client_name} skin loaded');
            """
        }
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∫–∏–Ω–∞
        data = {
            "app_name": f"{client_name.title()} Application",
            "services": [
                {"id": "service1", "name": "–£—Å–ª—É–≥–∞ 1", "price": 1000, "duration": 60},
                {"id": "service2", "name": "–£—Å–ª—É–≥–∞ 2", "price": 1500, "duration": 90}
            ],
            "working_hours": {
                "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": {"start": "09:00", "end": "18:00"},
                "–≤—Ç–æ—Ä–Ω–∏–∫": {"start": "09:00", "end": "18:00"},
                "—Å—Ä–µ–¥–∞": {"start": "09:00", "end": "18:00"},
                "—á–µ—Ç–≤–µ—Ä–≥": {"start": "09:00", "end": "18:00"},
                "–ø—è—Ç–Ω–∏—Ü–∞": {"start": "09:00", "end": "18:00"},
                "—Å—É–±–±–æ—Ç–∞": {"start": "10:00", "end": "16:00"},
                "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": {"start": "10:00", "end": "16:00"}
            },
            "contact_info": {
                "phone": "+7 (999) 123-45-67",
                "email": f"info@{client_name}.com",
                "address": f"—É–ª. {client_name.title()}, 1"
            },
            "api_url": "http://localhost:8080"
        }
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫–∏–Ω
        skin_path = self.store.create_skin(client_name, skin_config, data)
        
        print(f"‚úÖ –°–∫–∏–Ω —Å–æ–∑–¥–∞–Ω: {skin_path}")
        print(f"üåê URL: {self.store.get_skin_url(client_name)}")
        
        return skin_path
    
    def list_skins(self, args):
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–∫–∏–Ω–æ–≤"""
        skins = self.store.list_skins()
        
        print("üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–∏–Ω—ã:")
        for skin in skins:
            print(f"   - {skin['name']}")
            print(f"     –ü—É—Ç—å: {skin['path']}")
            print(f"     –•–µ—à: {skin['metadata'].get('skin_hash', 'unknown')}")
            print()
    
    def validate_skin(self, args):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∫–∏–Ω–∞"""
        client_name = args.get('client', 'default')
        
        print(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∫–∏–Ω–∞: {client_name}")
        validation = self.store.validate_skin(client_name)
        
        if validation['valid']:
            print("‚úÖ –°–∫–∏–Ω –≤–∞–ª–∏–¥–µ–Ω")
        else:
            print("‚ùå –°–∫–∏–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω")
            print("–û—à–∏–±–∫–∏:", validation['errors'])
        
        if validation['warnings']:
            print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:", validation['warnings'])
    
    def delete_skin(self, args):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–∫–∏–Ω–∞"""
        client_name = args.get('client')
        
        if not client_name:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞: --client=name")
            return
        
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–∫–∏–Ω–∞: {client_name}")
        
        if self.store.delete_skin(client_name):
            print("‚úÖ –°–∫–∏–Ω —É–¥–∞–ª–µ–Ω")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫–∏–Ω–∞")
    
    def copy_skin(self, args):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∏–Ω–∞"""
        source = args.get('source')
        target = args.get('target')
        
        if not source or not target:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ source –∏ target: --source=name --target=name")
            return
        
        print(f"üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∏–Ω–∞: {source} ‚Üí {target}")
        
        if self.store.copy_skin(source, target):
            print("‚úÖ –°–∫–∏–Ω —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–∏–Ω–∞")
    
    def export_skin(self, args):
        """–≠–∫—Å–ø–æ—Ä—Ç —Å–∫–∏–Ω–∞"""
        client_name = args.get('client')
        export_path = args.get('path', f"{client_name}_skin.zip")
        
        if not client_name:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞: --client=name")
            return
        
        print(f"üì¶ –≠–∫—Å–ø–æ—Ä—Ç —Å–∫–∏–Ω–∞: {client_name} ‚Üí {export_path}")
        
        if self.store.export_skin(client_name, export_path):
            print("‚úÖ –°–∫–∏–Ω —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–∫–∏–Ω–∞")
    
    def _adjust_color(self, color: str, adjustment: int) -> str:
        """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞"""
        # –ü—Ä–æ—Å—Ç–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —è—Ä–∫–æ—Å—Ç–∏
        try:
            r = int(color[:2], 16)
            g = int(color[2:4], 16)
            b = int(color[4:6], 16)
            
            r = max(0, min(255, r + adjustment))
            g = max(0, min(255, g + adjustment))
            b = max(0, min(255, b + adjustment))
            
            return f"#{r:02x}{g:02x}{b:02x}"
        except:
            return f"#{color}"
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ CLI"""
        parser = argparse.ArgumentParser(description='Skin-As-Code CLI')
        subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
        
        # –ö–æ–º–∞–Ω–¥–∞ create-skin
        create_parser = subparsers.add_parser('create-skin', help='–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∫–∏–Ω–∞')
        create_parser.add_argument('--client', default='default', help='–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞')
        create_parser.add_argument('--color', default='2a5298', help='–û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç (hex)')
        create_parser.add_argument('--layout', default='booking_page', help='–ú–∞–∫–µ—Ç')
        create_parser.add_argument('--theme', default='default', help='–¢–µ–º–∞')
        
        # –ö–æ–º–∞–Ω–¥–∞ list
        list_parser = subparsers.add_parser('list', help='–°–ø–∏—Å–æ–∫ —Å–∫–∏–Ω–æ–≤')
        
        # –ö–æ–º–∞–Ω–¥–∞ validate
        validate_parser = subparsers.add_parser('validate', help='–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∫–∏–Ω–∞')
        validate_parser.add_argument('--client', default='default', help='–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞')
        
        # –ö–æ–º–∞–Ω–¥–∞ delete
        delete_parser = subparsers.add_parser('delete', help='–£–¥–∞–ª–µ–Ω–∏–µ —Å–∫–∏–Ω–∞')
        delete_parser.add_argument('--client', required=True, help='–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞')
        
        # –ö–æ–º–∞–Ω–¥–∞ copy
        copy_parser = subparsers.add_parser('copy', help='–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∏–Ω–∞')
        copy_parser.add_argument('--source', required=True, help='–ò—Å—Ö–æ–¥–Ω—ã–π –∫–ª–∏–µ–Ω—Ç')
        copy_parser.add_argument('--target', required=True, help='–¶–µ–ª–µ–≤–æ–π –∫–ª–∏–µ–Ω—Ç')
        
        # –ö–æ–º–∞–Ω–¥–∞ export
        export_parser = subparsers.add_parser('export', help='–≠–∫—Å–ø–æ—Ä—Ç —Å–∫–∏–Ω–∞')
        export_parser.add_argument('--client', required=True, help='–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞')
        export_parser.add_argument('--path', help='–ü—É—Ç—å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞')
        
        args = parser.parse_args()
        
        if args.command == 'create-skin':
            self.create_skin(vars(args))
        elif args.command == 'list':
            self.list_skins(vars(args))
        elif args.command == 'validate':
            self.validate_skin(vars(args))
        elif args.command == 'delete':
            self.delete_skin(vars(args))
        elif args.command == 'copy':
            self.copy_skin(vars(args))
        elif args.command == 'export':
            self.export_skin(vars(args))
        else:
            parser.print_help()

# –°–æ–∑–¥–∞–Ω–∏–µ package.json –¥–ª—è npm –∫–æ–º–∞–Ω–¥
def create_package_json():
    """–°–æ–∑–¥–∞–Ω–∏–µ package.json —Å npm –∫–æ–º–∞–Ω–¥–∞–º–∏"""
    package_json = {
        "name": "skin-system",
        "version": "1.0.0",
        "description": "Skin-As-Code —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è JALM Full Stack",
        "main": "cli.py",
        "scripts": {
            "create-skin": "python skin_system/cli.py create-skin",
            "list-skins": "python skin_system/cli.py list",
            "validate-skin": "python skin_system/cli.py validate",
            "delete-skin": "python skin_system/cli.py delete",
            "copy-skin": "python skin_system/cli.py copy",
            "export-skin": "python skin_system/cli.py export"
        },
        "keywords": ["skin", "ui", "jalm", "template"],
        "author": "JALM Foundation",
        "license": "MIT"
    }
    
    with open("package.json", 'w', encoding='utf-8') as f:
        json.dump(package_json, f, indent=2)

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º package.json –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not Path("package.json").exists():
        create_package_json()
    
    cli = SkinCLI()
    cli.run() 